<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-18T19:51:37+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lv-liu</title><subtitle>程序员的梦&lt;br/&gt;
冬天的情绪&lt;br/&gt;
一天的种种&lt;br/&gt;
ASC&lt;br/&gt;
&lt;a href=&quot;mailto:v4liulv@outlook.com&quot;&gt;
  &lt;i class=&quot;fas fa-envelope&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
&lt;a href=&quot;https://github.com/v4liulv&quot;&gt;
  &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
&lt;a href=&quot;https://codeforces.com/profile/v4liulv&quot;&gt;
  &lt;i class=&quot;fas fa-chart-bar&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
&lt;a href=&quot;https://vjudge.net/user/v4liulv&quot;&gt;
  &lt;i class=&quot;fas fa-smile&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
&lt;a href=&quot;https://www.zhihu.com/people/liu.lv/activities&quot;&gt;
  &lt;i class=&quot;fab fa-zhihu&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
&lt;iframe
  src=&quot;https://music.163.com/outchain/player?type=2&amp;id=421934273&amp;auto=0&amp;height=32&quot;
  width=100%
  height=52
  frameborder=&quot;no&quot;
  border=&quot;0&quot;
  marginwidth=&quot;0&quot;
  marginheight=&quot;0&quot;
&gt;&lt;/iframe&gt;
</subtitle><entry><title type="html">工作流API工程DEMO新增调整说明</title><link href="http://localhost:4000/_posts/2020-05-18-%E5%B7%A5%E4%BD%9C%E6%B5%81API%E5%B7%A5%E7%A8%8B%E6%96%B0%E5%A2%9E%E8%B0%83%E6%95%B4%E8%AF%B4%E6%98%8E/" rel="alternate" type="text/html" title="工作流API工程DEMO新增调整说明" /><published>2020-05-18T00:00:00+08:00</published><updated>2020-05-18T00:00:00+08:00</updated><id>http://localhost:4000/_posts/%E5%B7%A5%E4%BD%9C%E6%B5%81API%E5%B7%A5%E7%A8%8B%E6%96%B0%E5%A2%9E%E8%B0%83%E6%95%B4%E8%AF%B4%E6%98%8E</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-18-%E5%B7%A5%E4%BD%9C%E6%B5%81API%E5%B7%A5%E7%A8%8B%E6%96%B0%E5%A2%9E%E8%B0%83%E6%95%B4%E8%AF%B4%E6%98%8E/">&lt;h2 id=&quot;新增调整概述&quot;&gt;新增调整概述&lt;/h2&gt;

&lt;p&gt;主要针对新增的工作流和现场环境进行调整，以下满足现状的情况，并开发对应测试类，主要有以下调整来满足现状：&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;内网Maven缺包问题&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;新增获取工作流任务实例列表接口&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;新增获取工作流任务实例日志列表接口&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;新增获取工作流任务实例日志详情接口&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;新增根据工作流和任务名获取某一个数据时间运行日志详情&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;单独分离测试代码&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;需求是会逐渐增长的！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;调整内容&quot;&gt;调整内容&lt;/h3&gt;

&lt;p&gt;调整内容主要包含以下内容：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;测试全部分离到test下&lt;/li&gt;
    &lt;li&gt;DEMO类独立作为API借口实现&lt;/li&gt;
    &lt;li&gt;Maven支持外网环境打包把依赖包全部打包到lib目录下&lt;/li&gt;
    &lt;li&gt;内网环境可注释到Maven依赖，通过导入本地包方式导入lib目录下依赖包&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;新增内容&quot;&gt;新增内容&lt;/h3&gt;

&lt;p&gt;新增内容主要包含以下内容：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;DEMO类新增查看任务实例运行情况taskInstanceList方法&lt;/li&gt;
    &lt;li&gt;DEMO类新增获取任务ID方法getTaskID&lt;/li&gt;
    &lt;li&gt;DEMO类新增任务实例日志列表方法&lt;/li&gt;
    &lt;li&gt;DEMO串联通过工作流ID和任务ID获取某一具体任务实例的日志信息&lt;/li&gt;
    &lt;li&gt;测试新增获取任务实例列表测试方法taskInstanceTest&lt;/li&gt;
    &lt;li&gt;测试新增获取任务实例日志详情测试方法taskInstanceLog&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;版本信息&quot;&gt;版本信息&lt;/h2&gt;

&lt;p&gt;当前版本为1.0.1&lt;/p&gt;

&lt;p&gt;历史版本为1.0.0&lt;/p&gt;

&lt;h2 id=&quot;调整详情&quot;&gt;调整详情&lt;/h2&gt;

&lt;h3 id=&quot;测试代码调整&quot;&gt;测试代码调整&lt;/h3&gt;

&lt;p&gt;之前代码测试代码和DEMO业务实现代码内，现在测试代码必须放到test下。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;junit依赖scope设置为test，如下&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新增测试类WorkFlowTest，并且迁移测试代码块到该类下&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;迁移的测试方法包含：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建工作流 createTest&lt;/li&gt;
  &lt;li&gt;启动工作流 startTest&lt;/li&gt;
  &lt;li&gt;停止工作流 stopTest&lt;/li&gt;
  &lt;li&gt;删除工作流 deleteTest&lt;/li&gt;
  &lt;li&gt;工作流串联 workflowSeries&lt;/li&gt;
  &lt;li&gt;重跑工作流任务实例 triggerTaskTest&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;测试resources调整&quot;&gt;测试resources调整&lt;/h3&gt;

&lt;p&gt;之前版本直接mian进行测试，那么配置main的resources即可，但是现在测试全部调整到test下，那么需要复制一份main下resource到测试的resources下。&lt;/p&gt;

&lt;p&gt;main下resources&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;复制到test的resources后&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;maven打包调整&quot;&gt;maven打包调整&lt;/h3&gt;

&lt;p&gt;中行现场都是内网开发，内网私库还不完善，每次折腾这个包消耗大量时间。基于这个问题maven打包进行了调整可以在外面把全部的依赖包下载到工程的lib下，这样内网即可直接注释掉maven依赖部分，直接使用lib下依赖包即可。&lt;/p&gt;

&lt;p&gt;要实现这功能需要调整的部分有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;maven新增打包依赖包下载到lib目录下&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;外网环境进行编译打包(可不执行)，因提供包的时候已经打好依赖包到lib下&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;内网环境注释掉maven全部依赖配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Project Structure 的 Libraries添加Java配置lib目录，并且选择Model&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;查看包并检查是否已经可编译&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/20200518_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;新增详情&quot;&gt;新增详情&lt;/h2&gt;

&lt;p&gt;新增的内容主要是基于上传版本没有，现在比较确定的需求接口，比如任务实例列表、任务实例日志列表、任务实例日志详情等。&lt;/p&gt;

&lt;p&gt;相关新增工作流API接口说明可参考&lt;strong&gt;工作流API任务实例和日志接口说明.doc&lt;/strong&gt;相关文档。&lt;/p&gt;

&lt;h3 id=&quot;获取任务id方法&quot;&gt;获取任务ID方法&lt;/h3&gt;

&lt;p&gt;获取任务ID方法的方法名为getTaskID，实现功能是通过工作流名和任务名称获取对应的任务ID。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法说明&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;所属类&lt;/th&gt;
      &lt;th&gt;方法名&lt;/th&gt;
      &lt;th&gt;参数说明&lt;/th&gt;
      &lt;th&gt;返回值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;WorkflowDemo&lt;/td&gt;
      &lt;td&gt;getTaskID&lt;/td&gt;
      &lt;td&gt;参数有两个工作流名和任务名&lt;/td&gt;
      &lt;td&gt;任务ID&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;参数说明&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数名&lt;/th&gt;
      &lt;th&gt;参数类型&lt;/th&gt;
      &lt;th&gt;参数说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;workflowName&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;工作流名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskName&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;任务名称&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;功能实现：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过工作流名调用获取任务列表方法，解析结果报文获取到任务列表数组。&lt;/li&gt;
  &lt;li&gt;循环任务列表数组获取到任务名是否跟输入值任务名是否相同。&lt;/li&gt;
  &lt;li&gt;匹配上的解析报文中获取到任务ID。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;  /**
     * 获取taskID
     *
     * @param workflowName 工作流名称
     * @param taskName task 名称
     * @return 请求报文json
     */
    public static String getTaskID(String workflowName, String taskName) throws Exception {
        String taskList = queryTaskList(workflowName);
        String taskId = null;

        JSONObject jsonObject  = JSONObject.parseObject(taskList);
        JSONObject resultData = jsonObject.getJSONObject(&quot;resultData&quot;);
        JSONArray content = resultData.getJSONArray(&quot;content&quot;);

        for (int i = 0; i&amp;lt; content.size(); i++){
            JSONObject jsonObject1 = content.getJSONObject(i);
            String taskName1 = jsonObject1.getString(&quot;taskName&quot;);
            if(taskName.equals(taskName1)){
                taskId = jsonObject1.getString(&quot;taskId&quot;);
            }
        }
        return taskId;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;任务实例列表方法和测试方法&quot;&gt;任务实例列表方法和测试方法&lt;/h3&gt;

&lt;p&gt;任务实例列表方法通过工作流名和任务名获取的全部的任务实例列表情况。&lt;/p&gt;

&lt;h4 id=&quot;任务实例列表方法&quot;&gt;任务实例列表方法&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;方法说明&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;所属类&lt;/th&gt;
      &lt;th&gt;方法名&lt;/th&gt;
      &lt;th&gt;参数说明&lt;/th&gt;
      &lt;th&gt;返回值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;WorkflowDemo&lt;/td&gt;
      &lt;td&gt;taskInstanceList&lt;/td&gt;
      &lt;td&gt;参数有两个工作流名和任务名&lt;/td&gt;
      &lt;td&gt;结果报文&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;参数说明&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数名&lt;/th&gt;
      &lt;th&gt;参数类型&lt;/th&gt;
      &lt;th&gt;参数说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;workflowName&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;工作流名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskName&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;任务名称&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;功能实现：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先通过获取任务ID方法获取任务ID。&lt;/li&gt;
  &lt;li&gt;通过任务ID获取和其他请求参数查询获取任务实例列表API接口。&lt;/li&gt;
  &lt;li&gt;返回结果任务实例列表结果报文。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;   /**
     * 查看任务实例情况
     *
     * @param workflowName 工作流名
     * @param taskName 任务名称
     */
    public static String taskInstanceList(String workflowName, String taskName) throws Exception {
        String taskID = getTaskID(workflowName, taskName);
        String method = &quot;GET&quot;;
        Map&amp;lt;String, String&amp;gt; params = new HashMap&amp;lt;&amp;gt;();
        params.put(&quot;pageIndex&quot;, &quot;0&quot;);
        params.put(&quot;pageSize&quot;, &quot;5&quot;);
        params.put(&quot;condition[taskParam]&quot;, taskID);
        //params.put(&quot;condition[status]&quot;, &quot;2&quot;);
        String url = properties.getProperty(&quot;tbds_proter_ip&quot;) + properties.getProperty(&quot;tbds_task_instance_url&quot;);
        return publicHttps(url, method, params);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特别注意：接口的URL地址、请求参数、结果报文说明请查阅&lt;strong&gt;工作流API任务实例和日志接口说明.doc&lt;/strong&gt;文档。&lt;/p&gt;

&lt;h4 id=&quot;任务实例列表测试方法&quot;&gt;任务实例列表测试方法&lt;/h4&gt;

&lt;p&gt;是进行任务列表方法的测试验证的测试方法，测试方法中工作流名和任务名称请根据实际情况调整。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;    @Test
    public void taskInstanceTest() throws Exception {
        String workflowName = &quot;doc&quot;;
        String taskName = &quot;compress-doc&quot;;
        WorkflowDemo.taskInstanceList(workflowName, taskName);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;特别注意：&lt;/strong&gt; 测试方法后续都在test目录下，并且测试类统一都一样为WorkFlowTest，后续不作说明。&lt;/p&gt;

&lt;h3 id=&quot;任务实例日志列表方法和测试方法&quot;&gt;任务实例日志列表方法和测试方法&lt;/h3&gt;

&lt;h4 id=&quot;任务实例日志列表方法&quot;&gt;任务实例日志列表方法&lt;/h4&gt;

&lt;p&gt;任务实例下可能存在多个日志情况，可能是人工重跑或异常重跑，如正常情况是一个任务实例是只有一个日志情况。&lt;/p&gt;

&lt;p&gt;如需要获取某个任务实例的日志详情首先得需要获取对应的任务实例的对应的日志列表，按需求获取某个或全部的日志详情信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;功能实现&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过工作流名和任务名获取任务ID&lt;/li&gt;
  &lt;li&gt;根据任务ID获取对应的任务实例列表&lt;/li&gt;
  &lt;li&gt;如获取第一个任务实例的获取数据时间&lt;/li&gt;
  &lt;li&gt;根据1中taskID和3的数据时间获取到对应任务实例全部的日志类别&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;代码实现&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt; /**
     *
     * @param workflowName 工作流名
     * @param taskName 任务名
     *
     * @return 任务实例日志列表结果报文
     */
    public static String taskInstanceLogList(String workflowName, String taskName) throws Exception {
        String method = &quot;GET&quot;;
        Map&amp;lt;String, String&amp;gt; params = new HashMap&amp;lt;&amp;gt;();
        params.put(&quot;taskId&quot;, getTaskID(workflowName, taskName));
        String listLogListURL = properties.getProperty(&quot;tbds_proter_ip&quot;) + properties.getProperty(&quot;tbds_task_instance_log_list&quot;);
        String taskInstanceList = taskInstanceList(workflowName, taskName);

        JSONObject rRoot = JSONObject.parseObject(taskInstanceList);
        //任务实例JSONArray
        JSONArray content = rRoot.getJSONObject(&quot;resultData&quot;).getJSONArray(&quot;content&quot;);

        //最新的那个任务实例getJSONObject(1)
        String dataTime = content.getJSONObject(1).get(&quot;dataTime&quot;).toString();
        params.put(&quot;dataTime&quot;, dataTime);
        return publicHttps(listLogListURL, method, params);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;任务实例日志列表测试方法&quot;&gt;任务实例日志列表测试方法&lt;/h4&gt;

&lt;p&gt;测试任务实例日志类别，其中的参数工作流名和任务名称根据实际情况调整。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
    @Test
    public void taskInstanceLogList() throws Exception {
        String workflowName = &quot;doc&quot;;
        String taskName = &quot;compress-doc&quot;;
        WorkflowDemo.taskInstanceLogList(workflowName, taskName);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;任务实例日志详情方法和测试方法&quot;&gt;任务实例日志详情方法和测试方法&lt;/h3&gt;

&lt;p&gt;需要获取根据工作流名和任务名获取任务实例的某个或多个日志详情。&lt;/p&gt;

&lt;h4 id=&quot;任务实例日志详情方法&quot;&gt;任务实例日志详情方法&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;功能实现&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;根据任务实例日志列表方法获取到任务实例&lt;/li&gt;
  &lt;li&gt;通过任务ID和数据时间获取任务实例日志列表&lt;/li&gt;
  &lt;li&gt;根据日志列表获取某个日志列表的IP和尝试次数值&lt;/li&gt;
  &lt;li&gt;根据任务ID、数据时间、IP、尝试次数值获取详细日志&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt; String taskID = getTaskID(workflowName, taskName);
        String method = &quot;GET&quot;;

        Map&amp;lt;String, String&amp;gt; params = new HashMap&amp;lt;&amp;gt;();
        params.put(&quot;taskId&quot;, taskID);
        String listLogListURL = properties.getProperty(&quot;tbds_proter_ip&quot;) + properties.getProperty(&quot;tbds_task_instance_log_list&quot;);
        String taskInstanceList = taskInstanceList(workflowName, taskName);

        JSONObject rRoot = JSONObject.parseObject(taskInstanceList);
        //任务实例JSONArray
        JSONArray content = rRoot.getJSONObject(&quot;resultData&quot;).getJSONArray(&quot;content&quot;);

//////////////////////////////////////////////////////////////////////////////////////////////////////
        //最新的那个任务实例getJSONObject(1)
        String dataTime = content.getJSONObject(1).get(&quot;dataTime&quot;).toString();
        params.put(&quot;dataTime&quot;, dataTime);
        String listLogList = publicHttps(listLogListURL, method, params);
        //{
        //   &quot;resultCode&quot;:&quot;0&quot;,
        //   &quot;message&quot;:null,
        //   &quot;resultData&quot;:
        //   [
        //      &quot;18K,
        //      2020-05-13 09:01:22,
        //      172.27.0.124,
        //      1&quot;
        //   ],

        //   &quot;markInfo&quot;:null
        //}
        // --------------------------------------

        //params.put(&quot;condition[status]&quot;, &quot;2&quot;);
        String url = properties.getProperty(&quot;tbds_proter_ip&quot;) + properties.getProperty(&quot;tbds_task_instance_log_info&quot;);
        //查询单个任务实例下的任务列表
        String resultData = JSONObject.parseObject(listLogList).getJSONArray(&quot;resultData&quot;).get(0).toString();

        //任务调度器的代理服务器IP，也就是任务实例执行的客户端IP
        params.put(&quot;ip&quot;, resultData.split(&quot;,&quot;)[2]);
        params.put(&quot;tries&quot;, resultData.split(&quot;,&quot;)[3]);

        String resultResponse = publicHttps(url, method, params);
        System.out.println(resultResponse);

        return resultResponse;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;任务实例日志详情测试方法&quot;&gt;任务实例日志详情测试方法&lt;/h4&gt;

&lt;p&gt;测试方法主要测试获取到的某个任务实例的某个日志的日志详情。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;测试代码&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;    @Test
    public void taskInstanceLog() throws Exception {
        String workflowName = &quot;doc&quot;;
        String taskName = &quot;compress-doc&quot;;
        WorkflowDemo.taskInstanceLogInfo(workflowName, taskName);
    }
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="TBDS" /><summary type="html">新增调整概述</summary></entry><entry><title type="html">MapReduce工程Demo说明</title><link href="http://localhost:4000/_posts/2020-05-18-MapReduce%E5%B7%A5%E7%A8%8BDemo%E8%AF%B4%E6%98%8E/" rel="alternate" type="text/html" title="MapReduce工程Demo说明" /><published>2020-05-18T00:00:00+08:00</published><updated>2020-05-18T00:00:00+08:00</updated><id>http://localhost:4000/_posts/MapReduce%E5%B7%A5%E7%A8%8BDemo%E8%AF%B4%E6%98%8E</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-18-MapReduce%E5%B7%A5%E7%A8%8BDemo%E8%AF%B4%E6%98%8E/">&lt;h2 id=&quot;工程说明&quot;&gt;工程说明&lt;/h2&gt;

&lt;h2 id=&quot;demo概述&quot;&gt;DEMO概述&lt;/h2&gt;

&lt;h2 id=&quot;功能说明&quot;&gt;功能说明&lt;/h2&gt;

&lt;h2 id=&quot;代码详解&quot;&gt;代码详解&lt;/h2&gt;

&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;</content><author><name></name></author><category term="Hadoop" /><summary type="html">工程说明</summary></entry><entry><title type="html">Oracle常用SQL</title><link href="http://localhost:4000/_posts/2020-05-15-Oracle%E5%B8%B8%E7%94%A8SQL/" rel="alternate" type="text/html" title="Oracle常用SQL" /><published>2020-05-15T00:00:00+08:00</published><updated>2020-05-15T00:00:00+08:00</updated><id>http://localhost:4000/_posts/Oracle%E5%B8%B8%E7%94%A8SQL</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-15-Oracle%E5%B8%B8%E7%94%A8SQL/">&lt;h2 id=&quot;oracle-创建用流程&quot;&gt;Oracle 创建用流程&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TEMPORARY TABLESPACE PCS_JCGLPT_tmp
         TEMPFILE 'd:\oracle\app\oradata\gz\PCS_JCGLPT_tmp.dbf'
         SIZE 32m
         AUTOEXTEND ON 
         NEXT  32m
         EXTENT MANAGEMENT LOCAL;
         
CREATE TABLESPACE PCS_JKPT_DATA
         LOGGING
         DATAFILE 'D:\Oracle\app\oradata\gz\PCS_JKPT_DATA.dbf'
         SIZE 32M
         AUTOEXTEND ON
         NEXT 32M MAXSIZE UNLIMITED
         EXTENT MANAGEMENT LOCAL;

         
---CREATE USER pcs_sd_jzcq_pzk IDENTIFIED BY pcs_sd_jzcq_pzk;

---DROP USER pcs_sd_jzcq_pzk;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者用户提示删除正在使用，那么通过下面方式删除&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select username,sid,serial## from v$session; 
alter system kill session '66,294'; --66为删除用户的id,294为serial#的值
DROP USER pcs_yn_hiveIncrupdate_pzk cascade;


CREATE USER PCS_JCGLPT IDENTIFIED BY pcs_jcglpt
         ACCOUNT UNLOCK
         DEFAULT TABLESPACE PCS_JCGLPT
         TEMPORARY TABLESPACE PCS_JCGLPT_tmp;
         
GRANT CONNECT, RESOURCE TO PCS_JCGLPT;
GRANT UNLIMITED TABLESPACE to PCS_JCGLPT; --使用表空间
GRANT CREATE TABLE TO PCS_JCGLPT;--建表
GRANT DROP TABLE TO PCS_JCGLPT;
GRANT INSERT TABLE TO PCS_JCGLPT;
GRANT UPDATE TABLE TO PCS_JCGLPT;
GRANT ALTER SESSION TO PCS_JCGLPT;--修改会话
GRANT CREATE CLUSTER TO PCS_JCGLPT;--建立聚簇
GRANT CREATE DATABASE LINK TO PCS_JCGLPT;--建立数据库链接
GRANT CREATE SEQUENCE TO PCS_JCGLPT;--建立序列
GRANT CREATE SESSION TO PCS_JCGLPT;--建立会话
GRANT CREATE SYNONYM TO PCS_JCGLPT;--建立同义词
GRANT CREATE VIEW TO PCS_JCGLPT;--建立视图
GRANT CREATE CLUSTER TO PCS_JCGLPT;--建立聚簇
GRANT CREATE PROCEDURE TO PCS_JCGLPT; --建立过程
GRANT CREATE SEQUENCE TO PCS_JCGLPT; --建立序列
GRANT CREATE TRIGGER TO PCS_JCGLPT;--建立触发器
GRANT CREATE TYPE TO PCS_JCGLPT; --建立类型
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;用户被锁定解决办法&quot;&gt;用户被锁定，解决办法&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;alter user pcs_yn_hiveIncrupdate_pzk account unlock; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;创建数据库&quot;&gt;创建数据库&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;开始 -&amp;gt; 程序 —&amp;gt;Oracle-Oracle11g_home1—&amp;gt;配置和移植工具—&amp;gt;Database Configuration Assistant命令，启动DBCA，出现“欢迎使用”窗口，
–&amp;gt; 点击下一步
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;步骤1 创建数据库 点击下一步&lt;/li&gt;
        &lt;li&gt;步骤2 数据库模版，默认使用一般用途和事务处理，点击下一步&lt;/li&gt;
        &lt;li&gt;步骤3 数据库标识，并输入全局数据库名：dse.cs.sinobest，SID：dse
–&amp;gt; 后面全部下一步，然后完成&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;删除数据库&quot;&gt;删除数据库&lt;/h2&gt;
&lt;p&gt;开始”—&amp;gt;“程序”—&amp;gt;Oracle-Oracle11g_home1—&amp;gt;配置和移植工具—&amp;gt;Database Configuration Assistant命令，启动DBCA，出现“欢迎使用”窗口，
–&amp;gt; 点击下一步&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;步骤1 选择删除数据库 点击下一步&lt;/li&gt;
    &lt;li&gt;步骤2 选择需要删除的数据库 点击下一步&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;创建表空间&quot;&gt;创建表空间&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;1 . 创建用户之前要创建”临时表空间”，若不创建则默认的临时表空间为temp
&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
  &lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TEMPORARY TABLESPACE db_temp
         TEMPFILE 'D:appAdministratororadataNewDBDB_TEMP.DBF'
         SIZE 32M
         AUTOEXTEND ON
         NEXT 32M MASIZE UNLIMITED
         EXTENT MANAGEMENT LOCAL;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TEMPORARY TABLESPACE pcs_editor_tmp
         TEMPFILE 'd:\oracle\app\oradata\basic\pcs_editor_tpm.dbf'
         SIZE 32m
         AUTOEXTEND on
         NEXT 32m
         EXTENT MANAGEMENT local;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TEMPORARY TABLESPACE pcs_zstp_tmp
         TEMPFILE 'd:\oracle\app\oradata\zstp\pcs_zstp_tmp.dbf'
         SIZE 32m
         AUTOEXTEND ON 
         NEXT 32m
         EXTENT MANAGEMENT LOCAL;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;创建用户之前先要创建数据表空间，若没有创建则默认永久性表空间是system。
&lt;strong&gt;语法：&lt;/strong&gt;
      &lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLESPACE db_data
      LOGGING
      DATAFILE 'D:appAdministratororadataNewDBDB_DATA.DBF'
      SIZE 32M
      AUTOEXTEND ON
      NEXT 32M MAXSIZE UNLIMITED
      EXTENT MANAGEMENT LOCAL;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLESPACE pcs_editor_data
         LOGGING
         DATAFILE 'D:\Oracle\app\oradata\basic\pcs_editor_data.dbf'
         SIZE 32M
         AUTOEXTEND ON
         NEXT 32M MAXSIZE UNLIMITED
         EXTENT MANAGEMENT LOCAL;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;strong&gt;DB_DATA&lt;/strong&gt;和&lt;strong&gt;DB_TEMP&lt;/strong&gt;是你自定义的数据表空间名称和临时表空间名称，可以任意取名；&lt;strong&gt;D:appAdministratororadataNewDBDB_DATA.DBF&lt;/strong&gt;是数据文件的存放位置，&lt;strong&gt;DB_DATA.DBF&lt;/strong&gt;文件名也是任意取；&lt;strong&gt;size 32M&lt;/strong&gt;是指定该数据文件的大小，也就是表空间的大小。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLESPACE pcs_zstp_data
         LOGGING
         DATAFILE 'D:\Oracle\app\oradata\zstp\pcs_zstp_data.DBF'
         SIZE 32M
         AUTOEXTEND ON
         NEXT 32M MAXSIZE UNLIMITED
         EXTENT MANAGEMENT LOCAL;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;创建修改用户&quot;&gt;创建修改用户&lt;/h2&gt;

&lt;p&gt;oracle 内部有两个建好的用户：system 和 sys。用户可直接登录到 system 用户以创建其他用户，因为system具有创建别 的用户的 权限。 在安装 oracle 时，用户或系统管理员首先可以为自己建立一个用户。&lt;/p&gt;

&lt;p&gt;管理员 sys/123456 登录。&lt;/p&gt;

&lt;p&gt;语法[创建用户]： create user 用户名 identified by 口令[即密码]；
例子使用默认表空间：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE USER test IDENTIFIED BY test;
CREATE USER yy_editor_csb IDENTIFIED BY 123456;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子使用已经创建的表空间&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE USER yy_editor_csb IDENTIFIED BY 123456
         ACCOUNT UNLOCK
         DEFAULT TABLESPACE pcs_editor_data
         TEMPORARY TABLESPACE pcs_editor_tmp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;语法[更改用户]: alter user 用户名 identified by 口令[改变的口令];
例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER USER test IDENTIFIED BY 123456;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;删除用户&quot;&gt;删除用户&lt;/h2&gt;

&lt;p&gt;语法：drop user 用户名;
例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;DROP USER yy_editor_csb;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若用户拥有对象，则不能直接删除，否则将返回一个错误值。指定关键字cascade,可删除用户所有的对象，然后再删除用户。
语法： drop user 用户名 cascade;
例子：  删除test用户对象&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;DROP USER test cascade;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;授权角色&quot;&gt;授权角色&lt;/h2&gt;
&lt;p&gt;oracle为兼容以前版本，提供三种标准角色（role）:connect/resource和dba.&lt;/p&gt;

&lt;h3 id=&quot;三种标准角色&quot;&gt;三种标准角色&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;connect role(连接角色)&lt;/strong&gt;
–临时用户，特指不需要建表的用户，通常只赋予他们connect role. 
–connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select/insert/update和delete等。
–拥有connect role 的用户还能够创建表、视图、序列（sequence）、簇（cluster）、同义词(synonym)、回话（session）和其他  数据的链（link）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;resource role(资源角色)&lt;/strong&gt;
–更可靠和正式的数据库用户可以授予resource role。
–resource提供给用户另外的权限以创建他们自己的表、序列（sequence）、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dba role(数据库管理员角色)&lt;/strong&gt;
–dba role拥有所有的系统权限
–包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有。&lt;/p&gt;

&lt;h3 id=&quot;授权命令&quot;&gt;授权命令&lt;/h3&gt;
&lt;p&gt;语法：grant connect, resource to 用户名;
例子授权connect和resource权限：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;GRANT CONNECT, RESOURCE TO test;
GRANT CONNECT, RESOURCE TO yy_editor_csb;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子授权DBA权限：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;GRANT DBA TO test
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;授权某个用户访问另外用户权限&quot;&gt;授权某个用户访问另外用户权限&lt;/h3&gt;
&lt;p&gt;//把JBQDEDI读写权限 授权给JBQD&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select 'Grant all on '||table_name||'to JBQD ;' from all_tables
where owner = upper('JBQDEDI');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//把当前登陆的用户表查询权限授权给b用户&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select 'GRANT SELECT ON '||table_name||' to b;'  from user_tables
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到所有表的授权命名，如果需要授权那个表复制进行执行授权即可，如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;GRANT SELECT ON b_editor_abstract TO yy_editor_csb;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;撤销权限&quot;&gt;撤销权限&lt;/h3&gt;
&lt;p&gt;语法： revoke connect, resource from 用户名;
列子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;REVOKE CONNECT, RESOURCE FROM test;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;创建授权删除角色&quot;&gt;创建/授权/删除角色&lt;/h2&gt;

&lt;p&gt;除了前面讲到的三种系统角色—-connect、resource和dba，用户还可以在oracle创建自己的role。用户创建的role可以由表或系统权限或两者的组合构成。为了创建role，用户必须具有create role系统权限。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.创建角色&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;语法： CREATE ROLE 角色名;&lt;/p&gt;

&lt;p&gt;例子： CREATE ROLE testRole;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.授权角色&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;语法： GRANT SELECT ON CLASS to 角色名;&lt;/p&gt;

&lt;p&gt;列子： GRANT SELECT ON CLASS TO testRole;&lt;/p&gt;

&lt;p&gt;注：现在，拥有testRole角色的所有用户都具有对class表的select查询权限&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;3.删除角色&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;语法： DROP ROLE 角色名;&lt;/p&gt;

&lt;p&gt;例子： DROP ROLE testRole;&lt;/p&gt;

&lt;p&gt;注：与testRole角色相关的权限将从数据库全部删除&lt;/p&gt;

&lt;h2 id=&quot;复制表数据&quot;&gt;复制表数据&lt;/h2&gt;
&lt;p&gt;语法：insert into 插入表 select * from 复制来源表
例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO b_editor_abstract SELECT * FROM yy_gxksh_zsb.b_editor_abstract;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;函数日期格式转换&quot;&gt;函数日期格式转换&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE OR REPLACE PACKAGE pkg_otou AS
/******************************************************************************
   NAME:       pkg_otou
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/19/2014      defu       1. Created this package.
******************************************************************************/
  --传入日期型，返回unix型日期
  function otou(in_date IN DATE) return varchar2;
  --传入字符型日期，格式：yyyymmddhh24miss，返回unix型日期
  function otou(in_date IN varchar2) return varchar2;
   --传入数字型日期，格式：yyyymmddhh24miss，返回unix型日期
  function otou(in_date IN number) return varchar2;
    --传入字符型日期，格式：yyyy-mm-dd hh24:mi:ss，返回unix型日期
  function otou2(in_date IN varchar2) return varchar2;

  ----例子
  /* SELECT pkg_otou.otou(sysdate),
        pkg_otou.otou2('2014-11-10 10:01:02') ,
        pkg_otou.otou(20141110100102),
        pkg_otou.otou('20141110100102')
   FROM DUAL;*/

END pkg_otou;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;触发器&quot;&gt;触发器&lt;/h2&gt;

&lt;h3 id=&quot;检测某个表如果更新则更新另外一个表&quot;&gt;检测某个表如果更新，则更新另外一个表&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE OR REPLACE TRIGGER tr_update_pkey_index
  --INSERT数据库插入会触发此触发器，after表示在数据库动作之后触发器执行;
AFTER UPDATE ON b_titan_propertykey
  --for each row：对表的每一行触发器执行一次。如果没有这一选项，则只对整个表执行一次。
FOR EACH ROW
  BEGIN
    --复制来源的表值可以使用 :new.字段名称
    UPDATE B_TITAN_INDEX SET
      PKEYS = :new.PKEY_NAME,
      INDEX_LABEL = :new.PKEY_LABEL,
      INDEX_LABEL_TYPE = :new.PKEY_TYPE,
      ISUNIQ = :new.PKEY_INDEX_UNIQ
    WHERE INDEX_NAME = :new.PKEY_NAME;
  END;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;检测某个表如果插入则插入另外一个表&quot;&gt;检测某个表如果插入，则插入另外一个表&lt;/h3&gt;
&lt;p&gt;```sql
  CREATE OR REPLACE TRIGGER TR_COPY_PKEY_INDEX
  –INSERT数据库插入会触发此触发器，after表示在数据库动作之后触发器执行;
after INSERT on B_TITAN_PROPERTYKEY
–for each row：对表的每一行触发器执行一次。如果没有这一选项，则只对整个表执行一次。
for each row
BEGIN
  INSERT INTO B_TITAN_INDEX(INDEX_NAME, PKEYS, INDEX_LABEL, INDEX_LABEL_TYPE, ISUNIQ)
  VALUES
    –复制来源的表值可以使用 :new.字段名称
    (:new.PKEY_NAME, :new.PKEY_NAME, :new.PKEY_LABEL, :new.PKEY_TYPE, :new.PKEY_INDEX_UNIQ);
END;
``&lt;/p&gt;</content><author><name></name></author><category term="数据库" /><summary type="html">Oracle 创建用流程 ```sql CREATE TEMPORARY TABLESPACE PCS_JCGLPT_tmp TEMPFILE ‘d:\oracle\app\oradata\gz\PCS_JCGLPT_tmp.dbf’ SIZE 32m AUTOEXTEND ON NEXT 32m EXTENT MANAGEMENT LOCAL; CREATE TABLESPACE PCS_JKPT_DATA LOGGING DATAFILE ‘D:\Oracle\app\oradata\gz\PCS_JKPT_DATA.dbf’ SIZE 32M AUTOEXTEND ON NEXT 32M MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL;</summary></entry><entry><title type="html">基于Jekyll搭建个人博客</title><link href="http://localhost:4000/_posts/2019-01-18-%E5%9F%BA%E4%BA%8EJekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" rel="alternate" type="text/html" title="基于Jekyll搭建个人博客" /><published>2019-01-18T00:00:00+08:00</published><updated>2019-01-18T00:00:00+08:00</updated><id>http://localhost:4000/_posts/%E5%9F%BA%E4%BA%8EJekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2</id><content type="html" xml:base="http://localhost:4000/_posts/2019-01-18-%E5%9F%BA%E4%BA%8EJekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;

&lt;p&gt;最开始我是在&lt;a href=&quot;https://blog.csdn.net/w_weilan&quot;&gt;CSDN&lt;/a&gt;上写博客的。博客写了一年多，访问量勉强破万，感觉其中至少有三成是自己贡献的。而且 CSDN 上的广告是越来越多，网页编辑器也是越来越不好用。&lt;/p&gt;

&lt;p&gt;十一月份，在青岛的 ICPC 区域赛失利之后，想要重新开始，和过去告别。也从此转移自己写博客的阵地。考虑过转投暂时还比较干净而且可以部分定义页面的&lt;a href=&quot;https://www.cnblogs.com/wu-kan/&quot;&gt;博客园&lt;/a&gt;，但是最终还是决定在&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;上搭建属于自己的博客。&lt;/p&gt;

&lt;p&gt;然后，翻了一些网上的教程，用&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt;框架和&lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot;&gt;NexT&lt;/a&gt;主题搭了一个比较素雅的符合个人审美的博客。然而，Hexo 搭建的博客需要先在本地生成博客页面然后再上传到服务器上，每次发博客都需要在电脑重新生成页面并上传，感觉没有那么方便。在不同电脑上想要发博客更是十分困难，感觉如果胡乱操作后本地部署的文件发生了一定的错乱，恢复起来会十分麻烦。&lt;/p&gt;

&lt;p&gt;后来发现，Github Pages 原生支持&lt;a href=&quot;https://www.jekyll.com.cn/&quot;&gt;Jekyll&lt;/a&gt;，因此如果只需要推送文章可以直接在 github 的仓库里做。于是决定在期末考试后用 Jekyll 重新搭建个人博客。原来的博客不再维护。&lt;/p&gt;

&lt;h2 id=&quot;构思&quot;&gt;构思&lt;/h2&gt;

&lt;p&gt;目前博客的 demo 如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jekyll-theme-WuK.wu-kan.cn/screenshot.png&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;想搭建一个足够干净、页面几乎不要有多余元素的博客，同时博客的功能还要足够丰富，满足我以下的需求：&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;用 Markdown 写博客&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;支持 Latex 公式&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;支持 mermaid 等插件&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;个性化 Live2D&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;分享一些我在其他网站的个人账号&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;移动端适配&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;足够快的加载速度&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;访问量统计，评论互动&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;需求是会逐渐增长的！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中，Live2D 是我某次访问别人的博客初次见到的，感觉非常吸引人。最终的目标是去掉网页上所有多余的元素，只剩下博文和 Live2D 看板娘，看板娘本身还可以作为博客访问的导航，感觉会十分有新意。&lt;/p&gt;

&lt;h2 id=&quot;搭建过程不定期更新&quot;&gt;搭建过程（不定期更新）&lt;/h2&gt;

&lt;p&gt;我目前读的专业是计科超算方向，所以软件工程专业相关方面的基础几乎为 0😌，大部分的内容都是参考网上教程慢慢摸索的，假如对某些过程有意见和建议欢迎向我提出！&lt;/p&gt;

&lt;h3 id=&quot;开发环境&quot;&gt;开发环境&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;我的博客使用 bundle 作为版本管理！如果你的环境里已经有 bundle 了，可以跳过此步！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个学期选了一门 Linux 相关的公选课，感觉还不错，因此直接把开发环境是搭建在 Windows Subsystem for Linux（简称 WSL）上了，Windows 下也可以直接访问其中的环境，详见&lt;a href=&quot;https://wu-kan.cn/_posts/2018-12-14-Windows-Subsystem-for-Linux/&quot;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt install -y ruby ruby-dev zlib1g.dev make gcc g++
# gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
sudo gem install bundler
# bundle config mirror.https://rubygems.org https://gems.ruby-china.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jekyll 博客是基于 ruby 语言开发的，要先将 ruby 装进来。此外，国内访问一些资源可能会很慢，推荐去掉上面的注释，使用国内镜像。&lt;/p&gt;

&lt;h3 id=&quot;在本地运行博客&quot;&gt;在本地运行博客&lt;/h3&gt;

&lt;p&gt;依次执行下述指令，可以自动下载并部署我博客的所有依赖。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/wu-kan/wu-kan.github.io
cd wu-kan.github.io
bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不想下载我的博文和图片，可以根据这个&lt;a href=&quot;https://github.com/wu-kan/wu-kan.github.io/issues/7&quot;&gt;issue&lt;/a&gt;，使用 svn 代替 git，从而快速下载必要的文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;svn checkout https://github.com/wu-kan/wu-kan.github.io/trunk/ --depth=files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;github 上的 jekyll 和普通的 jekyll 是有一点点区别的，比如说只支持特定的插件。我希望与 github 保持兼容，因此配置的依赖是直接引入了 github 版本的 jekyll，安装时间略久。&lt;/p&gt;

&lt;p&gt;我在一个全新的 Linux 中安装了一遍，需要的依赖已经在上面的“开发环境中列出来的”。如果&lt;code&gt;bundle install&lt;/code&gt;在你的机器上还是报错，要看报错信息，缺啥装啥。&lt;/p&gt;

&lt;p&gt;运行下述指令，检验（我自己做的时候遇到了一个很奇怪的问题&lt;code&gt;jekyll 3.8.5 | Error: Operation not permitted @ apply2files&lt;/code&gt;，重开 WSL 终端就好了）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bundle exec jekyll s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于我的博客已经达到了三百篇以上，在本地生成网页的速度有些慢，在我的机器上要跑三分钟（关掉配置项中的侧边栏总字数统计就快了，可达 25s）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到如上内容时就成功了，本地访问&lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt;即可查看效果。&lt;/p&gt;

&lt;h3 id=&quot;定制&quot;&gt;定制&lt;/h3&gt;

&lt;p&gt;我把博客实现的的插件基本上都封装起来了，可以直接在浏览器按 F12 查看我是怎么引入的。如果你想增加新的渲染规则，可以新建&lt;code&gt;_layouts&lt;/code&gt;目录，将你自己的渲染规则放进去，见&lt;a href=&quot;http://jekyllcn.com/docs/structure/&quot;&gt;目录结构 -Jekyll&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;加入-live2d-看板娘&quot;&gt;加入 Live2D 看板娘&lt;/h4&gt;

&lt;p&gt;参考了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fghrsh.net/post/123.html&quot;&gt;网页添加 Live2D 看板娘&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhangshuqiao.org/2018-07/%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98&quot;&gt;在网页中添加 Live2D 看板娘&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://paugram.com/coding/add-poster-girl-with-plugin.html&quot;&gt;给你的博客增加动态看板娘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于 live2d 的协议是 GPL，这里我不把它的源码拷贝到自己的博客项目了，直接用链接引入。在 html 的任意位置，或是我博客对应的&lt;code&gt;append&lt;/code&gt;选项下插入下述 html 代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link
  rel=&quot;stylesheet&quot;
  href=&quot;https://cdn.jsdelivr.net/gh/Dreamer-Paul/Pio@2.4/static/pio.min.css&quot;
/&amp;gt;
&amp;lt;script
  defer=&quot;defer&quot;
  src=&quot;https://cdn.jsdelivr.net/gh/Dreamer-Paul/Pio@2.4/static/l2d.min.js&quot;
&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script
  defer=&quot;defer&quot;
  src=&quot;https://cdn.jsdelivr.net/gh/Dreamer-Paul/Pio@2.4/static/pio.min.js&quot;
  onload='
    if (screen.width &amp;gt; screen.height)
    {
      let pio_container = document.createElement(&quot;div&quot;);
      pio_container.classList.add(&quot;pio-container&quot;);
      pio_container.classList.add(&quot;right&quot;);
      document.body.insertAdjacentElement(&quot;beforeend&quot;, pio_container);
      let pio_action = document.createElement(&quot;div&quot;);
      pio_action.classList.add(&quot;pio-action&quot;);
      pio_container.insertAdjacentElement(&quot;beforeend&quot;, pio_action);
      let pio_canvas = document.createElement(&quot;canvas&quot;);
      pio_canvas.id = &quot;pio&quot;;
      pio_canvas.style.width = &quot;14rem&quot;;
      pio_canvas.width = &quot;600&quot;;
      pio_canvas.height = &quot;800&quot;;
      pio_container.insertAdjacentElement(&quot;beforeend&quot;, pio_canvas);
      let pio = new Paul_Pio({
        &quot;mode&quot;: &quot;draggable&quot;,
        &quot;hidden&quot;: true,
        &quot;content&quot;: {
          &quot;skin&quot;: [&quot;要换成我的朋友吗？&quot;, &quot;让她放个假吧~&quot;],
          &quot;custom&quot;: [{
            &quot;selector&quot;: &quot;a&quot;,
            &quot;type&quot;: &quot;link&quot;,
          }, {
            &quot;selector&quot;: &quot;.sidebar-toggle&quot;,
            &quot;text&quot;: &quot;打开侧边栏叭~&quot;
          }, {
            &quot;selector&quot;: &quot;.effect-info&quot;,
            &quot;text&quot;: &quot;哇，你发现了什么！&quot;
          }, {
            &quot;selector&quot;: &quot;#sidebar-search-input&quot;,
            &quot;text&quot;: &quot;想搜索什么呢？很多干货哦！&quot;
          }, {
            &quot;selector&quot;: &quot;#toc&quot;,
            &quot;text&quot;: &quot;这是目录~&quot;
          }, {
            &quot;selector&quot;: &quot;.page-title&quot;,
            &quot;text&quot;: &quot;这是标题~&quot;
          }, {
            &quot;selector&quot;: &quot;.v&quot;,
            &quot;text&quot;: &quot;评论没有审核，要对自己的发言负责哦~&quot;
          }]
        },
        &quot;model&quot;: [
          &quot;https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/33/model.2018.bls-winter.json&quot;,
          &quot;https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/platelet-2/model.json&quot;,
          &quot;https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/xiaomai/xiaomai.model.json&quot;,
          &quot;https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/mashiro/seifuku.model.json&quot;,
          &quot;https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/seele/model.json&quot;,
          &quot;https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/Violet/14.json&quot;,
          &quot;https:\/\/cdn.jsdelivr.net/gh/xiaoski/live2d_models_collection/Kobayaxi/Kobayaxi.model.json&quot;,
          &quot;https:\/\/cdn.jsdelivr.net/gh/xiaoski/live2d_models_collection/mikoto/mikoto.model.json&quot;,
          &quot;https:\/\/cdn.jsdelivr.net/gh/xiaoski/live2d_models_collection/uiharu/uiharu.model.json&quot;]
      });
    }'
&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自定义参数见&lt;a href=&quot;https://github.com/Dreamer-Paul/Pio&quot;&gt;Dreamer-Paul/Pio&lt;/a&gt;，模型收集自&lt;a href=&quot;https://github.com/imuncle/live2d&quot;&gt;imuncle/live2d&lt;/a&gt;和&lt;a href=&quot;https://github.com/xiaoski/live2d_models_collection&quot;&gt;xiaoski/live2d_models_collection&lt;/a&gt;，。&lt;/p&gt;

&lt;h4 id=&quot;katex&quot;&gt;$\KaTeX$&lt;/h4&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/f2b28954d902&quot;&gt;使用 KaTeX 代替 MathJax 渲染公式&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://katex.org/docs/autorender.html&quot;&gt;Auto-render Extension · Katex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/katex/dist/katex.min.css&quot; /&amp;gt;
&amp;lt;script
  src=&quot;//cdn.jsdelivr.net/npm/katex/dist/katex.min.js&quot;
  defer=&quot;defer&quot;
&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script
  src=&quot;//cdn.jsdelivr.net/npm/katex/dist/contrib/auto-render.min.js&quot;
  defer=&quot;defer&quot;
  onload='renderMathInElement(document.body, { delimiters: [{ left: &quot;$&quot;, right: &quot;$&quot;, display: false }] })'
&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过这样仅能显示$E=mc^2$这样的行间公式，行内公式是没有办法显示的（&lt;a href=&quot;https://github.com/wu-kan/wu-kan.github.io/issues/1&quot;&gt;issue&lt;/a&gt;）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-tex&quot;&gt;$$
E=mc^2
$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一种方法是引入 mathjax 进行渲染，但是这样做就失去了用 katex 的初心了。后来我发现 katex 有对应的插件可以解决这一问题。在上面代码后补充如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script
  src=&quot;//cdn.jsdelivr.net/npm/katex/dist/contrib/mathtex-script-type.min.js&quot;
  defer=&quot;defer&quot;
&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如下。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E=mc^2&lt;/script&gt;

&lt;p&gt;可以在&lt;a href=&quot;https://katex.org/docs/libs.html&quot;&gt;这个页面&lt;/a&gt;查看一些别的插件，比如化学方程式的插件等等，都是可以引入的。&lt;/p&gt;

&lt;h4 id=&quot;mermaid-图&quot;&gt;mermaid 图&lt;/h4&gt;

&lt;p&gt;我希望自己能按照 markdown 代码块扩展的规则来写 mermaid 流程图：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其效果如下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此需要插入如下内容（将代码块隐藏，并在原位置插入 mermaid 图）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;style&amp;gt;
  pre.language-mermaid,
  code.language-mermaid {
    display: none;
  }
&amp;lt;/style&amp;gt;
&amp;lt;script
  src=&quot;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js&quot;
  defer=&quot;defer&quot;
  onload='
    for(let x of document.getElementsByClassName(&quot;language-mermaid&quot;))
      if(x.nodeName==&quot;CODE&quot;)
      {
        let m = document.createElement(&quot;div&quot;);
        m.classList.add(&quot;mermaid&quot;);
        m.textContent = x.textContent;
        x.parentNode.insertAdjacentElement(&quot;beforebegin&quot;, m);
      }'
&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;prism-代码高亮&quot;&gt;prism 代码高亮&lt;/h4&gt;

&lt;p&gt;默认的代码高亮器&lt;code&gt;rouge&lt;/code&gt;渲染出来的效果一般，同时代码行号效果非常差。这里使用了 prismjs 来进行代码渲染。它的好处是模块化程度非常高，且支持自定义插件。&lt;/p&gt;

&lt;p&gt;这里我引入了三个插件（代码行号、动态代码高亮、工具栏，且自己写了一个选中全部代码的按钮）作为例子，也可以像我一样自己定制。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link
  rel=&quot;stylesheet&quot;
  href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-coy.min.css&quot;
/&amp;gt;
&amp;lt;script
  src=&quot;//cdn.jsdelivr.net/npm/prismjs/components/prism-core.min.js&quot;
  defer=&quot;defer&quot;
&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script
  src=&quot;//cdn.jsdelivr.net/npm/prismjs/plugins/autoloader/prism-autoloader.min.js&quot;
  defer=&quot;defer&quot;
  onload='Prism.plugins.autoloader.languages_path = &quot;https:\/\/cdn.jsdelivr.net/npm/prismjs/components/&quot;'
&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link
  rel=&quot;stylesheet&quot;
  href=&quot;//cdn.jsdelivr.net/npm/prismjs/plugins/line-numbers/prism-line-numbers.min.css&quot;
/&amp;gt;
&amp;lt;script
  src=&quot;//cdn.jsdelivr.net/npm/prismjs/plugins/line-numbers/prism-line-numbers.min.js&quot;
  defer=&quot;defer&quot;
  onload='
    for(let x of document.getElementsByTagName(&quot;pre&quot;))
      x.classList.add(&quot;line-numbers&quot;);'
&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link
  rel=&quot;stylesheet&quot;
  href=&quot;//cdn.jsdelivr.net/npm/prismjs/plugins/toolbar/prism-toolbar.min.css&quot;
/&amp;gt;
&amp;lt;script
  src=&quot;//cdn.jsdelivr.net/npm/prismjs/plugins/toolbar/prism-toolbar.min.js&quot;
  defer=&quot;defer&quot;
  onload='
    Prism.plugins.toolbar.registerButton(&quot;select-code&quot;, function (env) {
      let button = document.createElement(&quot;button&quot;);
      button.textContent = &quot;select this &quot; + env.language;
      button.addEventListener(&quot;click&quot;, function () {
        if (document.body.createTextRange) {
          let range = document.body.createTextRange();
          range.moveToElementText(env.element);
          range.select();
        } else if (window.getSelection) {
          let selection = window.getSelection();
          let range = document.createRange();
          range.selectNodeContents(env.element);
          selection.removeAllRanges();
            selection.addRange(range);
        }
      });
      return button;
    })'
&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;valine-评论&quot;&gt;valine 评论&lt;/h4&gt;

&lt;p&gt;配置详见&lt;a href=&quot;https://valine.js.org/&quot;&gt;官方手册&lt;/a&gt;，说得很清楚了。引入这个插件后，会在 html 页面中寻找&lt;code&gt;.v&lt;/code&gt;的页面元素。其中 appId 和 appKey 都要自己去申请，我的 leanCloud 开了白名单，直接使用我的是不能用的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;v&quot;&amp;gt;
  &amp;lt;i class=&quot;fas fa-spinner fa-pulse&quot;&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script
  src=&quot;https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js&quot;
  defer=&quot;defer&quot;
  onload='
    new Valine({
      &quot;el&quot;: document.getElementsByClassName(&quot;v&quot;)[0],
      &quot;appId&quot;: &quot;9hABRddSuEkTgqLrt1VSK5B1-gzGzoHsz&quot;,
      &quot;appKey&quot;: &quot;NJ7RwmgrxsF7KDzlqU7YewlL&quot;,
      &quot;placeholder&quot;: &quot;在这里评论吧！填写邮箱可以获得 Gravatar 头像和回复通知哦&quot;,
      &quot;requiredFields&quot;: [&quot;nick&quot;,&quot;mail&quot;],
      &quot;visitor&quot;: true,
      &quot;recordIP&quot;: true
    })'
&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;下一步计划&quot;&gt;下一步计划&lt;/h2&gt;

&lt;p&gt;详细的开发计划及建站内容详见&lt;a href=&quot;https://jekyll-theme-WuK.wu-kan.cn/&quot;&gt;主题详情页&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;从&lt;a href=&quot;https://magical-girl.site/&quot;&gt;这个页面&lt;/a&gt;得到的灵感，目标是博客上除了文章和作为导航的 Live2D 之外不出现其他的模块，尽量的干净、快速。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;大部分的参考链接已在原文给出，同时搭建本博客的过程中还参考了以下内容，感谢作者们：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/9f198d5779e6&quot;&gt;Jekyll + Github Pages 博客搭建入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/ds19991999/article/details/81516568&quot;&gt;Jekyll 博客 Next 主题超深度配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/bb184f61c9ae&quot;&gt;【应用软件】Jekyll 配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="博客搭建" /><summary type="html">引言</summary></entry><entry><title type="html">Neo4j数据数据入库方案（OLD）</title><link href="http://localhost:4000/_posts/2018-08-15-Neo4j%E5%9B%BE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93%E6%96%B9%E6%A1%88(OLD)/" rel="alternate" type="text/html" title="Neo4j数据数据入库方案（OLD）" /><published>2018-08-15T00:00:00+08:00</published><updated>2018-08-15T00:00:00+08:00</updated><id>http://localhost:4000/_posts/Neo4j%E5%9B%BE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93%E6%96%B9%E6%A1%88(OLD)</id><content type="html" xml:base="http://localhost:4000/_posts/2018-08-15-Neo4j%E5%9B%BE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93%E6%96%B9%E6%A1%88(OLD)/">&lt;h2 id=&quot;第一章-neo4j数据入库方式&quot;&gt;第一章 Neo4j数据入库方式&lt;/h2&gt;
&lt;p&gt;Neo4j支持多种方式的数据入库的方式包含Neo4j Import、&lt;a href=&quot;&amp;quot;&amp;quot;&quot; title=&quot;Batch Import&quot;&gt;Batch Import&lt;/a&gt;、Load CSV、Cypher。&lt;/p&gt;

&lt;p&gt;下面按照数据量级别进行划分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;千万级别以上数据量：BatchImport和Neo4jImport。只能在初始化建库使用，已经存储的库不支持。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;十万到千万级别的数据量：Load CSV的方式，支持已有库的数据追加，适合大增量级别和中等数据量全量入库。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;小数据量级别五万级以下：Cypher的方式，支持已有库的小数据量增量入库，灵活方便，支持事务。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第二章-图库信息&quot;&gt;第二章 图库信息&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;业务图库&lt;/strong&gt;：是根据现有的业务基础和特定需求进行建库，其中节点和关系可以进行系统的评估和预测，选择可行性的入库方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;业务需求&lt;/strong&gt;：基于公安内部基础资源库进行人员信息的轨迹和行为进行关联的一种关系图。可以基于Cypher查询分析人员的行为轨迹进行人与人之间的各种关系查询。&lt;/p&gt;

&lt;h3 id=&quot;21人的基本信息&quot;&gt;2.1.人的基本信息&lt;/h3&gt;

&lt;p&gt;姓名、证件号码、家庭住址、户的家庭成员、详细地址、婚姻状态等&lt;/p&gt;

&lt;h3 id=&quot;22人的轨迹行为&quot;&gt;2.2.人的轨迹行为&lt;/h3&gt;

&lt;p&gt;旅馆住宿、乘坐航班、乘坐火车、乘坐客车、上网、出入境、迁移、租赁房屋等。&lt;/p&gt;

&lt;h3 id=&quot;23建库的目的&quot;&gt;2.3.建库的目的&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于人的轨迹行为的查询，可视化展示。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于人的轨迹行为通过特定的规则进行人与人之间存在的行为轨迹关系进行数据挖掘和分析，得出存在的关系脉络和可能存在的关系网。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24图库数据量预估&quot;&gt;2.4.图库数据量预估&lt;/h3&gt;

&lt;p&gt;前提先得了解&lt;a href=&quot;&amp;quot;&amp;quot;&quot; title=&quot;数据建模&quot;&gt;数据建模&lt;/a&gt;才能进行相关的信息的评估，可视化分析的根据贵州的情况最初预估在5亿-10亿的节点之间、10亿-30亿的边，因为各个省的信息有差异所以此只是一个基本的评估。&lt;/p&gt;

&lt;h2 id=&quot;第三章-全量方案&quot;&gt;第三章 全量方案&lt;/h2&gt;

&lt;p&gt;基于上面图库数据量预估，以及参考&lt;a href=&quot;&amp;quot;&amp;quot;&quot; title=&quot;数据建模&quot;&gt;数据建模&lt;/a&gt;手册可以得出，图库的全量入库只能是Neo4j Import 或者 Batch Import进行导入新键库。&lt;/p&gt;

&lt;p&gt;查看此章节前必看&lt;a href=&quot;&amp;quot;&amp;quot;&quot; title=&quot;数据建模手册&quot;&gt;数据建模手册&lt;/a&gt;和&lt;a href=&quot;&amp;quot;&amp;quot;&quot; title=&quot;Batch Import手册&quot;&gt;Batch Import手册&lt;/a&gt;，也可参考&lt;a href=&quot;&amp;quot;&amp;quot;&quot; title=&quot;Neo4j 操作手册&quot;&gt;Neo4j 操作手册&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;31全量方式选择&quot;&gt;3.1.全量方式选择&lt;/h3&gt;

&lt;p&gt;本方案通过HBase资源库生成CSV文件，然后选择Batch Import读取进行全量数据的导入。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;选择Batch Import具体原因有以下几点：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Batch Import是大批量处理的Neo4j的一直快速有效的方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Batch Import可以支持索引的创建而Neo4j Import导入时候不支持索引创建。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Batch Import 不依赖Neo4j的安装，在任何服务器都可以执行，生成库后可以直接复制到需要使用的Neo4j的安装服务器上即可，而Neo4j Import必须依赖Neo4j的安装服务器才能使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Batch Import支持可配置内存，而Neo4j Import只能依赖Neo4j安装的使用内存。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;通用缺点：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;不管是Neo4j Import 还是Batch Import都不支持已经存在的图库进行数据追加，只能在第一次初始化使用通过Import命令进行新图库创建。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要先提前准备好需要入库的CSV数据文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果已经生成完成了图库，如果需要在添加某个类别的一个大数据量级别的节点和关系，需要全部重新建库，这是致命的缺陷属于Neo4j设计上的缺陷。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;导入CSV如果关系中依赖的节点ID在节点CSV文件中找不到将可能会异常。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;32全量方案图&quot;&gt;3.2.全量方案图&lt;/h3&gt;

&lt;p&gt;通过下面图进行全量方案简要流程说明：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1522374353832_25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;通过ODBA标准库或HBase资源库、其他可能来源库，生成图库规则的CSV数据文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CSV数据文件包含节点和关系的数据文件，再通过Batch Import将CSV数据文件生成图数据库&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;33csv数据文件&quot;&gt;3.3.CSV数据文件&lt;/h3&gt;

&lt;h4 id=&quot;331使用方式&quot;&gt;3.3.1.使用方式&lt;/h4&gt;

&lt;p&gt;通过MapReduce读取源库的方式生成CSV数据文件&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;方式一：MR读取Oracle标准库生成CSV（支持）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;方式二：MR读取HBase资源库生成CSV（推荐）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本案例使用方式二。&lt;/p&gt;

&lt;h4 id=&quot;332实现原理&quot;&gt;3.3.2.实现原理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;通过Oracle或者HBase某类资源作为MapReduce的输入&lt;/li&gt;
  &lt;li&gt;然后在通过Map读取字段配置信息，过滤处理&lt;/li&gt;
  &lt;li&gt;再通过Reduce读取配置信息提供的规则组装生成输出文件（CSV文件）输出到HDFS&lt;/li&gt;
  &lt;li&gt;从HDFS拷贝到本地&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;问题：所有的关系都是基于人员信息去关联的，那么人员信息在现在标准库是找不到这样一个一个已经有资源表，只能通过多个轨迹类资源表去合成大宽表，这样就需要合成实现抽取一个大宽表到User的合成表中，下面将介绍这部分内容，合成身份证号的大宽表。&lt;/p&gt;

&lt;h3 id=&quot;34身份证号大宽表&quot;&gt;3.4.身份证号大宽表&lt;/h3&gt;

&lt;p&gt;通过读取配置信息作为输入过滤，读取MR的配置信息进行MR抽取到User人员信息的大宽表。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配置信息表：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;大宽表MR抽取的公共配置信息 B_BIGWID_TAB_GGPZXX&lt;/li&gt;
  &lt;li&gt;大宽表MR的JOB配置表 B_BIGWID_TAB_TASK&lt;/li&gt;
  &lt;li&gt;大宽表的列配置表 B_BIGWID_TAB_QUALIFIER&lt;/li&gt;
  &lt;li&gt;大宽表User身份证号配置信息 B_USER_BIGTAB_PZXXB&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;35数据库配置表的表公共字段结构&quot;&gt;3.5.数据库配置表的表公共字段结构&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：&lt;em&gt;这是后续所有配置表的公共字段，每个表都包含这些字段，后续不再出现&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段长度&lt;/th&gt;
      &lt;th&gt;是否允许为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SYSTEMID&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;SYS_GUID()&lt;/td&gt;
      &lt;td&gt;主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_USER&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;‘SYS’&lt;/td&gt;
      &lt;td&gt;创建人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_TIME&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;SYSDATE&lt;/td&gt;
      &lt;td&gt;创建时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UPDATE_TIME&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;SYSDATE&lt;/td&gt;
      &lt;td&gt;更新时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCBZ&lt;/td&gt;
      &lt;td&gt;VARCHAR2(4)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;删除标志，0代表未删除，1代表已删除&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BLZD1&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;保留字段1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BLZD2&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;保留字段2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BLZD3&lt;/td&gt;
      &lt;td&gt;VARCHAR3(300)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;保留字段3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BLZD4&lt;/td&gt;
      &lt;td&gt;VARCHAR4(500)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;保留字段4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BLZD5&lt;/td&gt;
      &lt;td&gt;VARCHAR4(1000)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;保留字段5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;36-全量数据入库配置表信息&quot;&gt;3.6 全量数据入库配置表信息&lt;/h3&gt;

&lt;h4 id=&quot;361-b_bigwid_tab_ggpzxx&quot;&gt;3.6.1 B_BIGWID_TAB_GGPZXX&lt;/h4&gt;
&lt;p&gt;大宽表MR抽取的公共配置信息表&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段长度&lt;/th&gt;
      &lt;th&gt;是否允许为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BIGWID_TYPE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;大宽表类型，如01代表User大宽表，02代表关系分析宽表，人员标签大宽表代表03，标识号大宽04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BIGWID_DEL&lt;/td&gt;
      &lt;td&gt;VARCHAR2(1000)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;大宽表类型详情&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TARGET_TABLE_ROWKEY_DELIM&lt;/td&gt;
      &lt;td&gt;VARCHAR2(10)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ROWKEY分割符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TARGET_TABLE_VALUE_DELIM&lt;/td&gt;
      &lt;td&gt;VARCHAR2(10)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;值的分隔符号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCAN_CACHE&lt;/td&gt;
      &lt;td&gt;NUMBER(4)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;一次RPC请求数，默认为1000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCAN_BATCH&lt;/td&gt;
      &lt;td&gt;NUMBER(4)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;一次请求的最大的列数，默认为100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IS_COMPRESS&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;是否启动压缩，0代表否，1代表是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COMPRESS_TYPE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01为default,02为ZIP2, 03为snapp&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;362-b_bigwid_tab_task&quot;&gt;3.6.2 B_BIGWID_TAB_TASK&lt;/h4&gt;
&lt;p&gt;大宽表MR的JOB配置表&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段长度&lt;/th&gt;
      &lt;th&gt;是否允许为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BIGWID_ID&lt;/td&gt;
      &lt;td&gt;VARCHAR2(32)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;大宽表类型外键一对多对应GGPZXX表的主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TASK_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(200)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;区分各个抽取来源表的Shell的参数，唯一&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JOB_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(200)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;运行MR-JOB作业的名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JAR_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MR-JAR包名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TMP_TARGET_DIR&lt;/td&gt;
      &lt;td&gt;VARCHAR2(300)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出HDFS的临时目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE_TABLE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;HBASE的源表英文名（大写）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE_TABLE_FAMILY&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;CF&lt;/td&gt;
      &lt;td&gt;MR输入源表的列族&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TARGET_TABLE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MR输出到HBASE表名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TARGET_TABLE_FAMILY&lt;/td&gt;
      &lt;td&gt;VARCHAR2(20)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;CF&lt;/td&gt;
      &lt;td&gt;MR输出表目标表的列族，默认CF&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TARGET_TABLE_ROWKEY&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;ZJHM&lt;/td&gt;
      &lt;td&gt;输出表的主键，也就是输出表主键来源输出表那个字段或者那些字段&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TARGET_TABLE_QUALIFIER&lt;/td&gt;
      &lt;td&gt;VARCHAR2(200)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出表的列名，可以配置多个列名，来源输入的表列名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TARGET_VALUE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(200)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出表列值，来源输入表的多个字段，如zd1:zd2..&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;363-b_bigwid_tab_qualifier&quot;&gt;3.6.3 B_BIGWID_TAB_QUALIFIER&lt;/h4&gt;

&lt;p&gt;大宽表的列配置表&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段长度&lt;/th&gt;
      &lt;th&gt;是否允许为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TASK_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;task name 启动作业名，task外键与B_BIGWID_TAB_TASK的taskName一对一关联&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;列名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_VALUE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;列值对应源表列名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_NAME_IS_TIME&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;是否是日期字段&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_NAME_DATA_TYPE&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;数据格式类型，0代表201501格式，1代表DATE类型2015/01,2代表毫秒格式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_NAME_TYPE&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0代表是源字段的值，1代表是配置就直接赋值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_NAME_IS_DATEZH&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;列值是否是日期字段&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_VALUE_DATA_TYPE&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;列值格式类型，0代表201501格式，1代表DATE类型2015/01,2代表毫秒格式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_VALUE_TYPE&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;列值，0代表是源字段的值，1代表是配置就直接赋值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUALIFIER_VALUE_IS_DATEZH&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;列值，是否进行日期字段转换标准格式201701..,0代表否，1代表是&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;464-b_user_bigtab_pzxxb&quot;&gt;4.6.4 B_USER_BIGTAB_PZXXB&lt;/h4&gt;
&lt;p&gt;大宽表User身份证号配置信息&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段长度&lt;/th&gt;
      &lt;th&gt;是否允许为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CODE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(10)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;code值,区分某类别大表的标识符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE_TABLE_YWMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;源表英文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE_TABLE_ZWMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;源表中文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZJHM_ZD_YWMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;证件号码字段英文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZJHM_ZD_ZWMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;证件号码字段中文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XM_ZD_YWMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;姓名字段英文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XM_ZD_ZWMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;姓名字段中文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HBASE_TABLE_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;HBASE入库表名，大写&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;365-现场需要配置修改&quot;&gt;3.6.5 现场需要配置修改&lt;/h4&gt;
&lt;p&gt;需要根据现场实际HBase资源库资源库表进行适配修改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;B_BIGWID_TAB_TASK表&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;修改B_BIGWID_TAB_TASK中的关联资源表名的SOURCE_TABLE&lt;/li&gt;
      &lt;li&gt;修改B_BIGWID_TAB_TASK中的TARGET_TABLE_ROWKEY为关联资源表名的身份证号码字段名称&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;B_BIGWID_TAB_QUALIFIER表&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;修改B_BIGWID_TAB_QUALIFIER表中的TaskName和QUALIFIER_NAME适配修改QUALIFIER_VALUE的值其对应字段名称。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;B_USER_BIGTAB_PZXXB表&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;修改其SOURCE_TABLE_YWMC（源表英文名）、SOURCE_TABLE_ZWMC（源表中文名）&lt;/li&gt;
      &lt;li&gt;ZJHM_ZD_YWMC（证件号码字段英文名）、ZJHM_ZD_ZWMC（证件号码字段中文名）&lt;/li&gt;
      &lt;li&gt;如果表中有姓名，配置XM_ZD_YWMC（姓名字段英文名）、XM_ZD_ZWMC（姓名号码字段中文名）&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;366-数据抽取生成user身份证号大宽表&quot;&gt;3.6.6 数据抽取生成User(身份证号)大宽表&lt;/h4&gt;

&lt;p&gt;抽取HBase资源库的数据到User(身份证号)大宽表，需要Hadoop集群有相关的执行环境。&lt;/p&gt;

&lt;p&gt;具体步骤：
1、拷贝程序Jar包到Hadoop集群的&lt;code&gt;/home/hadoop/Kshfx/jar&lt;/code&gt;目录下。
2、拷贝程序运行需要的Jar包到Hadoop集群&lt;code&gt;/home/hadoop/Kshfx/libs/&lt;/code&gt;目录下。
3、拷贝运行的Shell脚本到Hadoop集群的&lt;code&gt;/home/hadoop/Kshfx/shell/&lt;/code&gt;目录下。
4、给shell脚步授权执行权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod 755 /home/hadoop/Kshfx/shell/*.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5、执行命令进行全量抽取。如下面命令抽取Hotel旅馆住宿信息表的身份证号信息到User大宽表，其他类似。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sh /home/hadoop/Kshfx/bin/kshxf-bigtab.sh USER_BIGWID_HOTEL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6、Yarn界面查看执行情况，如果成功在看下一步，异常情况在格外进行排查处理。
7、HBase shell命令查看B_USER_BIG_TABLE是否已经抽取成功。&lt;/p&gt;

&lt;p&gt;详细信息请查看[现场实施手册]&lt;/p&gt;

&lt;h3 id=&quot;37-生成csv数据文件&quot;&gt;3.7 生成CSV数据文件&lt;/h3&gt;
&lt;p&gt;上节已经进行User身份证号的大宽表抽取，那么需要的全部源表资源已经全部就绪，可以进行生成CSV数据文件操作。&lt;/p&gt;

&lt;h4 id=&quot;371-配置表&quot;&gt;3.7.1 配置表&lt;/h4&gt;

&lt;p&gt;配置表包含：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;B_BIMP_PZXXB（BatchImportCsv的Node的创建CSV的配置表）&lt;/li&gt;
  &lt;li&gt;B_BIMP_TITLE （BatchImport CSV的文件头配置信息表）&lt;/li&gt;
  &lt;li&gt;B_BIMP_MR_HBASE （BatchImport CSV的MapReduce读取HBase输入的配置信息表）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3711-b_bimp_pzxxb配置库信息表详情&quot;&gt;3.7.1.1 B_BIMP_PZXXB配置库信息表详情&lt;/h5&gt;
&lt;p&gt;B_BIMP_PZXXB（BatchImportCsv的Node的创建CSV的配置表）-提供对应Neo4j标签和类型以及源表等配置信息&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段长度&lt;/th&gt;
      &lt;th&gt;是否允许为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TYPE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(10)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;抽取资源类型，如001为旅馆住宿，002为航班信息。。。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TYPE_DET&lt;/td&gt;
      &lt;td&gt;VARCHAR2(300)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;TYPE详情描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LABEL&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;图数据库的NODE的标签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE_TABLE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;来源表源表英文名称&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;3712-b_bimp_title-batchimport-csv的文件头配置信息表&quot;&gt;3.7.1.2 B_BIMP_TITLE （BatchImport CSV的文件头配置信息表）&lt;/h5&gt;

&lt;p&gt;B_BIMP_TITLE （BatchImport CSV的文件头配置信息表）提供对应Import CSV对应的文件头的信息，以及关联字段等配置信息。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段长度&lt;/th&gt;
      &lt;th&gt;是否允许为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TYPE_ID&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;TYPE配置信息表外键,关联B_BIMP_PZXXB表的主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;T_TYPE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(10)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;图库的标题的类型，KIND=NEO4J_IMPORT_CSV_TITLE_TYPE, 00代表UserNode的相关配置，01代表本NODE,02代表全量的RELS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TITLE_VALUE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(200)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;标题的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SORT_NUM&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;CSV标题排序 0 1 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GLZD_TYPE&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;关联字段类型，0代表字段，1代表直接赋值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GLZD_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;关联字段名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GLZD_ISDATE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;关联字段源字段是否是Date类型，0代表是毫秒，1代表date类型，2代表其他类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GLZD_ISTIME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;关联字段是否是日期字段，0代表否，1代表是日期字段&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GLZD_BZ&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;关联字段标准，初始化定义后不可更改，用于Neo4j和SparkStreaming建模等&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;3713-b_bimp_mr_hbase-batchimport-csv的mapreduce读取hbase输入的配置信息表&quot;&gt;3.7.1.3 B_BIMP_MR_HBASE （BatchImport CSV的MapReduce读取HBase输入的配置信息表）&lt;/h5&gt;

&lt;p&gt;B_BIMP_MR_HBASE （BatchImport CSV的MapReduce读取HBase输入的配置信息表）提供输入源为HBase的时候的MR读取HBase作为输入的相关配置信息。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段长度&lt;/th&gt;
      &lt;th&gt;是否允许为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TYPE_ID&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;TYPE配置信息表外键,关联B_BIMP_PZXXB表的主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JAR_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;gxksh.Jar&lt;/td&gt;
      &lt;td&gt;MR运行的Jar包名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TASK_NAME&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MR运行的作业的名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE_TABLE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MR输入源表英文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCAN_CACHE&lt;/td&gt;
      &lt;td&gt;NUMBER(4)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;HBASE的SCAN每次rpc的请求记录数,默认为1000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCAN_BATCH&lt;/td&gt;
      &lt;td&gt;NUMBER(4)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;HBASE的SCAN的每次取的列数，默认100列&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OUTPUT_DIR&lt;/td&gt;
      &lt;td&gt;VARCHAR2(200)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MR的输出的HDFS路径&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NUM_REDUCE_TASKS&lt;/td&gt;
      &lt;td&gt;NUMBER(4)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;MR执行的Reduce的并发数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IS_MR_OUTPUT_COMPRESS&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;是否启用Reduce输出压缩，KIND=IS_MR_OUTPUT_COMPRESS,0代码不启动压缩，1代表启动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MR_OUTPUT_COMPRESS_TYPE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;压缩类型，kind=MR_OUTPUT_COMPRESS_TYPE, BZIP2,DEFAULT,SNAPP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCAN_CACHEBLOCKS&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;scan的所有数据是否放在缓存中，默认为0不放在缓存中，1代表放在缓存中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MAP_SPECULATIVE_EXECUTION&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;是否开启mr的map备用任务机制，默认0 不开启，1代表开启&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;3.7.2 现场适配配置修改&lt;/p&gt;

&lt;p&gt;因为暂时没有Web端的应用配置支持，所以需要在配置库层面进行处理，比如初始化第一次创建图库全量前，需要修改那么配置项。&lt;/p&gt;

&lt;p&gt;配置库实施配置时候已经生成了相关配置表和数据，因此只是需要修改其中的关联资源和关联字段即可，需要找出复合现场情况HBase资源库关联源和关联字段名。先看下面表格：
表格-类型对应的
| IMP_TYPE  | IMP_TYPE_DETAL  |
| ———— | ———— |
| 0200  | 人员信息  |
| 0201  | 旅馆信息  |
| 0202  | 火车信息  |
| 0203  | 名航信息  |
| 0204  | 网吧信息  |&lt;/p&gt;

&lt;p&gt;下面的修改都需要按照此表格对应的IMP_TYPE去进行每个标签类别的修改。
&lt;strong&gt;修改源表名&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.*, t.rowid from B_BIMP_PZXXB t;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据现场的HBase基础资源库对应表名称修改其源表名SOURCE_TABLE(也就是HBase中对应资源表名称)
注意：其中的User是合成的大表，不需要修改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改CSV文件头配置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select  t.TYPE_ID, t.T_TYPE, t.TITLE_VALUE, t.SORT_NUM, t.GLZD_TYPE, t.GLZD_NAME, t.GLZD_ISDATE, t.GLZD_ISTIME, t.rowid 
from B_BIMP_TITLE T
where t.type_id = (select d.systemid from B_BIMP_PZXXB d where d.type = '0201' and d.scbz = 0)
and t.t_type = '01'
and t.SCBZ = 0
and t.GLZD_TYPE = 0
order by t.sort_num;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;？其中where条件中的t.type = ‘0200’ 是上面表格类型对应表的IMP_TYPE,0200代表人员信息标签，以此类推0201代表旅馆信息…&lt;/li&gt;
  &lt;li&gt;？其中where条件中的t.t_type = ‘01’ 代表的节点还是关系，01代表节点，02代表关系，在人员信息里面没有定义关系，在相关的轨迹信息标签定义关系,也就是除了人员信息以外都要修改其关系，将t.type修改为02&lt;/li&gt;
  &lt;li&gt;？需要修改的字段为t.GLZD_NAME,根据现场情况的HBase库的字段进行适配修改&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;？注意字段类型是否date类型，如果在源库中或者视图库中抽取到HBase定义为Date类型，那么需要修改对应的GLZD_ISDATE和GLZD_ISTIME为1，如自定义主键由多个字段组成LGID&lt;/td&gt;
          &lt;td&gt;FJH，那么对应的GLZD_ISDATE和GLZD_ISTIME为0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;特别注意：此修改必须熟悉图库数据建模，如果不了解数据建模可参考数据建模手册
此修改过程如果有不明白的地方可以联系开发人员。&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;373-生成user节点csv文件&quot;&gt;3.7.3 生成User节点CSV文件&lt;/h4&gt;

&lt;p&gt;注意：如果了解现场Hadoop集群的话，此过程必须由现场的Hadoop集群的管理员协助完成，其中的包由开发人员提供。&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;p&gt;1、打包相关的kshfx-0.1.0.jar到Hadoop集群的主节点的&lt;code&gt;/home/hadoop/Kshfx/jar/&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;2、拷贝运行的Jar包到Hadoop集群的主节点的&lt;code&gt;/home/hadoop/Kshfx/libs/&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;3、拷贝相关的shell执行文件到&lt;code&gt;/home/hadoop/Kshfx/bin/&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;4、授权Shell执行脚步的执行权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;chmode 755 /home/hadoop/Kshfx/bin/*.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5、执行命令进行CSV文件生成&lt;/p&gt;

&lt;p&gt;执行成功在配置的hdfs路径上找到相关的生成的CSV数据文件，拷贝到Neo4j服务器。&lt;/p&gt;

&lt;p&gt;具体详情可以查看【现场实施手册】&lt;/p&gt;

&lt;h4 id=&quot;374-生成其他轨迹类节点和关系csv文件&quot;&gt;3.7.4 生成其他轨迹类节点和关系CSV文件&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;此部分内容完全和上一节一致，需要修改的是执行命令参数修改即可。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3.8 全量导入Neo4j图库&lt;/p&gt;

&lt;p&gt;我们通过上一章节介绍了生成CSV数据文件，本机拷贝到Batch Import的服务器上，那么直接通过Batch Import的import命令进行导入生成新的图库。Batch Import如何使用请阅读【&lt;a href=&quot;&amp;quot;&amp;quot;&quot; title=&quot;Neo4j-Batch-Import使用手册V0.1.0&quot;&gt;Neo4j-Batch-Import使用手册V0.1.0&lt;/a&gt;】。&lt;/p&gt;

&lt;p&gt;比如已经生成了相关user.csv,hotel.csv,hotel-rels.csv的CSV数据文件并且拷贝到Batch Import服务器，执行下面命令进行生成：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;import ..\data\databases\kshfx.db csv\kshfx\user.csv,csv\kshfx\hotel.csv csv\kshfx\hotel-rels.csv.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成kshfx.db新的图数据库后，Neo4j切换图数据，即可使用。&lt;/p&gt;

&lt;h2 id=&quot;第四章-增量方案&quot;&gt;第四章 增量方案&lt;/h2&gt;

&lt;h3 id=&quot;41增量实现原理&quot;&gt;4.1.增量实现原理&lt;/h3&gt;

&lt;p&gt;为了保证数据的一致性和数据节点和关系的唯一性原则，那么只能使用Cypher的Merge的方法进行增量的入库方式。增量方案使用Flume动态实时读取Oralce标准库的实时增量并且使用Pool方式推送到Spark Streaming，然后Spark 流处理实时在线的方式读取增量时间组装Cypher语句进行增量Neo4j的数据写入。&lt;/p&gt;

&lt;h3 id=&quot;42优缺点&quot;&gt;4.2.优缺点&lt;/h3&gt;

&lt;p&gt;Neo4j为了保证节点和关系的实时增量和唯一性数据问题，只能考虑Merge的方式，这样的合并处理会损失大量的性能。
此方案的优点：
1、可以完全保证实时性，5s-10s的范围增量时间差
2、可以保证数据的唯一性，使用Merge进行合并
3、可以动态更新想要更新的属性&lt;/p&gt;

&lt;p&gt;缺点：
1、通过Cypher本身性能就差，不到2000条/s
2、Merger合并写事务操作，更是消耗更多的性能，速度会下降几个数量级
3、Spark Stream流处理的检查点需要再进一步完善
4、需要添加Flume的SQL插件，兼容Hadoop平台需要需要结合生产环境测试验证&lt;/p&gt;

&lt;h3 id=&quot;43增量方案流程图&quot;&gt;4.3.增量方案流程图&lt;/h3&gt;

&lt;p&gt;Oracle –&amp;gt;Flume–&amp;gt;Spark流–&amp;gt;Neo4j图库&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1522384223866_43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;44增量实现&quot;&gt;4.4.增量实现&lt;/h3&gt;

&lt;p&gt;备：本方案基于CDH5.7.1进行测试可行性，验证增量正常&lt;/p&gt;

&lt;p&gt;增量实现注意以下几点：
1、FlumeSQL插件兼容性
本身Flume暂时不支持Oracle的数据增量的读取，需要使用FlumeSQL插件，可能会有兼容Flume版本问题，建议使用Flume1.6.0-cdh5.7.1，后续其他版本待测试验证
2、Flume ng 的配置SQL配置可参考【&lt;a href=&quot;&quot; title=&quot;Flume SQL NG配置手册&quot;&gt;Flume SQL NG配置手册&lt;/a&gt;】
3、Flume Pool方式数据到Spark Streaming注意其中的HDFS检查点配置
4、增量实现代码在&lt;a href=&quot;&quot; title=&quot;Kshfx-Spark模版&quot;&gt;Kshfx-Spark模版&lt;/a&gt;，这里不详细介绍，可以查看API
Neoj4 Cypher语句组装需要注意结合的业务和建模的实现主要考虑唯一性&lt;/p&gt;

&lt;p&gt;4.5.实施部署&lt;/p&gt;

&lt;p&gt;相关详情可以查看【&lt;a href=&quot;&quot; title=&quot;现场实施手册&quot;&gt;现场实施手册&lt;/a&gt;】&lt;/p&gt;</content><author><name></name></author><category term="图库" /><summary type="html">第一章 Neo4j数据入库方式 Neo4j支持多种方式的数据入库的方式包含Neo4j Import、Batch Import、Load CSV、Cypher。</summary></entry><entry><title type="html">DSEGraph-DataLoader使用手册</title><link href="http://localhost:4000/_posts/2018-07-04-DSEGraph-DataLoader%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/" rel="alternate" type="text/html" title="DSEGraph-DataLoader使用手册" /><published>2018-07-04T00:00:00+08:00</published><updated>2018-07-04T00:00:00+08:00</updated><id>http://localhost:4000/_posts/DSEGraph-DataLoader%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C</id><content type="html" xml:base="http://localhost:4000/_posts/2018-07-04-DSEGraph-DataLoader%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/">&lt;h2 id=&quot;安装graphloader&quot;&gt;安装GraphLoader&lt;/h2&gt;

&lt;p&gt;安装GraphLoader分为以下步骤：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;下载&lt;/li&gt;
    &lt;li&gt;解压&lt;/li&gt;
    &lt;li&gt;设置环境变量&lt;/li&gt;
    &lt;li&gt;检查&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;下载graph-loader安装包&quot;&gt;下载Graph Loader安装包&lt;/h3&gt;

&lt;p&gt;点击&lt;a href=&quot;https://pan.baidu.com/s/1erorpQrwXr0wUHRMgVQnMA&quot; title=&quot;下载地址&quot;&gt;下载地址&lt;/a&gt;进行下载。&lt;/p&gt;

&lt;p&gt;下载得到dse-grap-loader-1.0.1.zip的压缩文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 下载提取码为d4t4&lt;/p&gt;

&lt;h3 id=&quot;解压安装&quot;&gt;解压安装&lt;/h3&gt;

&lt;h4 id=&quot;步骤&quot;&gt;步骤：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;在集群需要安装graph-loader的节点，如19.31节点上创建安装目录
    &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mkdir -p /usr/share/dse-graph-loader
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;将上面下载的dse-grap-loader-1.0.1.zip的压缩文件通过sftp方式拷贝到/usr/share/dse-graph-loader路径下，如下图&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1529315140715_74.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;执行解压命令
    &lt;pre&gt;&lt;code&gt;cd /usr/share/dse-graph-loader
unzip dse-graph-loader-1.0.1.zip
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1529315807911_42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;得到&lt;code&gt;/usr/share/dse-graph-loader/&lt;/code&gt;的目录即为graph loader目录&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;设置环境变量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;执行下面命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;echo 'export DES_GLOADER_HOME=/usr/share/dse-graph-loader' &amp;gt;&amp;gt; /etc/profile
echo 'export PATH=$DES_GLOADER_HOME:$PATH' &amp;gt;&amp;gt; /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;source /etc/profile
chmod +755 /usr/share/dse-graph-loader/*.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1529316233010_69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;检查是否安装成功&quot;&gt;检查是否安装成功&lt;/h4&gt;
&lt;p&gt;此命令是查询dse loader和dse的版本信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;graphloader -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果出现下图所示证明安装成功:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1529316305475_70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;配置参数&quot;&gt;配置参数&lt;/h2&gt;

&lt;p&gt;公共配置文件在&lt;code&gt;/usr/share/dse-graph-loader/scripts/loadJdbc/base&lt;/code&gt;目录下的base.groovy&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;// 此处调用DataLoaderImpl.config()
config create_schema: true, load_new: false, load_vertex_threads: 200, load_edge_threads:100, read_threads:100
//是否自动创建模型，可选默认为true
create_schema = true
//是否是数据库导入方式，需要配置为true
isDatabase = true

// Oracle 连接参数配置
inputDatabase = '192.168.1.110:1521:orcl'
user = 'YY_GXKSH_ZSB'
password = '123456'
configTable = 'B_DSE_LOADER_CONFIG'
datePattern = &quot;yyyy-mm-dd hh24:mi:ss&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;配置项&lt;/th&gt;
      &lt;th&gt;值&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;preparation&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;是一种有效的检查机制。如果preparation设置true，那么就分析该模式是否有效的数据示例&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;create_schema&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;模式是从数据导入过程中创建，如果为false则需要先手动创建模型，生成环境需要设置为false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;load_new&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;新图如果在加载过程的开始时，顶点记录还不存在，配置load_new可以显著加快加载过程。然而，重要的是用户保证顶点记录确实是新的，或者在图中可以创建重复的顶点。在同一个脚本中创建的边将使用新创建的顶点来表示外向的inV和outV  如果load_new被设置为false，并且载入的数据包含在图中已经存在的任何顶点，就会创建重复的顶点。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;load_vertex_threads&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
      &lt;td&gt;加载顶点数据线程数为200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;load_edge_threads&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;加载边数据线程数为100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;isDatabase&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;加载数据来源是否JDBC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inputDatabase&lt;/td&gt;
      &lt;td&gt;192.168.1.110:1521:orcl&lt;/td&gt;
      &lt;td&gt;数据抽取来源库URL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;user&lt;/td&gt;
      &lt;td&gt;YY_GXKSH_ZSB&lt;/td&gt;
      &lt;td&gt;数据抽取来源库的用户名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;password&lt;/td&gt;
      &lt;td&gt;123456&lt;/td&gt;
      &lt;td&gt;数据抽取来源库的密码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;configTable&lt;/td&gt;
      &lt;td&gt;B_DSE_LOADER_CONFIG&lt;/td&gt;
      &lt;td&gt;数据抽取配置表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;datePattern&lt;/td&gt;
      &lt;td&gt;yyyy-mm-dd hh24:mi:ss&lt;/td&gt;
      &lt;td&gt;时间字符格式&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：其中数据库配置需要根据现场的数据抽取来源库进行配置修改，其他可选进行修改&lt;/p&gt;

&lt;h2 id=&quot;数据抽取配置表&quot;&gt;数据抽取配置表&lt;/h2&gt;

&lt;h3 id=&quot;数据抽取配置表---b_dse_loader_config&quot;&gt;数据抽取配置表 - B_DSE_LOADER_CONFIG&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http:///dse/数据抽取/db/B_DSE_LOADER_CONFIG.sql&quot; title=&quot;建表语句和插入sql&quot;&gt;建表语句和插入sql&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;字段说明：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段名&lt;/th&gt;
      &lt;th&gt;字段类型&lt;/th&gt;
      &lt;th&gt;可为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SYSTEMID&lt;/td&gt;
      &lt;td&gt;VARCHAR2(32)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;SYS_GUID()&lt;/td&gt;
      &lt;td&gt;主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CATEGORY&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;抽取分类，01代表抽取人轨迹关系抽取配置，可扩展&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZY_YWMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;抽取资源英文名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZY_ZWMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(100)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;抽取资源中文名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZY_QWK_VIEW&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;全文库视图&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZY_YYK_VIEW&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;应用库视图&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZY_WBZY_VIEW&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;缓冲库库视图&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZY_WBZY_VIEW&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;缓冲库库视图&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZY_KETTLE_MC&lt;/td&gt;
      &lt;td&gt;VARCHAR2(255)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;配置kettle的转换名对应PCS_WBZY_DATA.TRANS_LOG传输日志的TRANSNAME，用于生成批次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZLCQ_KSSJ&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量抽取_开始时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZLCQ_JSSJ&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量抽取_结束时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZLCQ_ZT&lt;/td&gt;
      &lt;td&gt;VARCHAR2(2)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;增量抽取_抽取状态（0初始，1完成, 2抽取中）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZLCQ_TYPE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(2)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量配置标签，用于区分每个增量配置信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BLZD1-5&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30-1000)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;扩展字段1-5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_USER&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30-1000)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;‘SYS’&lt;/td&gt;
      &lt;td&gt;创建人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_TIME&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;SYSDATE&lt;/td&gt;
      &lt;td&gt;创建时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UPDATE_TIME&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;SYSDATE&lt;/td&gt;
      &lt;td&gt;更新时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCBZ&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;删除标志，0代表未删除，1代表删除&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;数据抽取配置日志表-b_dse_loader_log&quot;&gt;数据抽取配置日志表 B_DSE_LOADER_LOG&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http:///dse/数据抽取/db/B_DSE_LOADER_LOG.sql&quot; title=&quot;建表语句和插入sql&quot;&gt;建表语句&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;字段说明：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段名&lt;/th&gt;
      &lt;th&gt;字段类型&lt;/th&gt;
      &lt;th&gt;可为空&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SYSTEMID&lt;/td&gt;
      &lt;td&gt;VARCHAR2(32)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;SYS_GUID()&lt;/td&gt;
      &lt;td&gt;主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CATEGORY&lt;/td&gt;
      &lt;td&gt;VARCHAR2(50)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;抽取分类，01代表抽取人轨迹关系抽取配置，可扩展&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZLCQ_TYPE&lt;/td&gt;
      &lt;td&gt;VARCHAR2(2)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量配置标签，用于区分每个增量配置信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZLCQ_KSSJ&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量抽取_开始时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZLCQ_JSSJ&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量抽取_结束时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZLCQ_ZT&lt;/td&gt;
      &lt;td&gt;VARCHAR2(2)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;增量抽取_抽取状态（0初始，1完成, 2抽取中）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BLZD1-5&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30-1000)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;扩展字段1-5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VERTICES&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;顶点数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EDGES&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;边数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PROPERTIES&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;属性数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ANONYMOUS&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;抽取无效数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TOTAL&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;抽取总数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TOTALTIME&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;抽取总耗时&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ERROR&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;如果抽取状态为0即为失败，那么存在抽取异常信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_USER&lt;/td&gt;
      &lt;td&gt;VARCHAR2(30-1000)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;‘SYS’&lt;/td&gt;
      &lt;td&gt;创建人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_TIME&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;SYSDATE&lt;/td&gt;
      &lt;td&gt;创建时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UPDATE_TIME&lt;/td&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;SYSDATE&lt;/td&gt;
      &lt;td&gt;更新时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCBZ&lt;/td&gt;
      &lt;td&gt;NUMBER(2)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;删除标志，0代表未删除，1代表删除&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;注意：根据现场的资源名称修改调整配置表配置信息。&lt;/p&gt;

&lt;h2 id=&quot;轨迹旅馆住宿关系图-配置抽取&quot;&gt;轨迹旅馆住宿关系图-配置抽取&lt;/h2&gt;

&lt;h3 id=&quot;抽取配置信息&quot;&gt;抽取配置信息&lt;/h3&gt;
&lt;p&gt;B_DSE_LOADER_CONFIG表,插入配置数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;insert into B_DSE_LOADER_CONFIG (CATEGORY, ZY_ZWMC, ZY_YWMC, ZY_QWK_VIEW, ZY_YYK_VIEW, ZY_WBZY_VIEW, ZY_KETTLE_MC, ZLCQ_KSSJ, ZLCQ_JSSJ, ZLCQ_ZT, ZLCQ_TYPE, BLZD1, BLZD2, BLZD3, BLZD4, BLZD5, CREATE_USER,SCBZ)
values ('01', '旅馆住宿信息', 'T_BZ_LY_LGZSXX', 'T_BZ_LY_LGZSXX', 'T_BZ_LY_LGZSXX', 'T_BZ_LY_LGZSXX', 'ORACLE_DSE_T_BZ_LY_LGZSXX', to_date('10-10-2017 14:42:59', 'dd-mm-yyyy hh24:mi:ss'), to_date('10-10-2017 14:42:59', 'dd-mm-yyyy hh24:mi:ss'), '1', '01', null, null, null, null, null, 'SYS', 0);
commit;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：CATEGORY=01代表轨迹关系图类别，ZLCQ_TYPE=01代表估轨迹旅馆住宿关系图的增量抽取类别
注意现场导入数据后，需要在创建视图库中创建的资源名为T_BZ_LY_LGZSXX.&lt;/p&gt;

&lt;p&gt;验证插入数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.* from B_DSE_LOADER_CONFIG t where CATEGORY = 01 and ZLCQ_TYPE = 01;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;现场视图数据视图准备&quot;&gt;现场视图数据视图准备&lt;/h3&gt;
&lt;p&gt;现场需要根据旅馆住宿信息表，创建视图库后，创建资源名为T_BZ_LY_LGZSXX的视图。&lt;/p&gt;

&lt;p&gt;视图要求,必须包含字段&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段名&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;可为空&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SYSTEMID&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZJHM&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;身份证号码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XM&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;姓名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LGID&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;旅馆ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LGMC&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;旅馆名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FJH&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;房间号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RZSJ&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;入住时间,必须为毫秒格式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TFSJ&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;退房时间,必须为毫秒格式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BZK_GXSJ_DATE&lt;/td&gt;
      &lt;td&gt;DATA&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量时间，DATE类型&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;还有其他需要抽取进图的全部字段。根据现场的资源情况而定，最好是其他全部字段都配置进视图。&lt;/p&gt;

&lt;h3 id=&quot;抽取脚本&quot;&gt;抽取脚本&lt;/h3&gt;
&lt;p&gt;模型是-人员旅馆住宿关系图&lt;/p&gt;

&lt;p&gt;脚本文件：&lt;code&gt;/usr/share/dse-graph-loader/scripts/loadJdbc/oracle_model_lgzs.groovy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;脚本内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-grovy&quot;&gt;//需要修改配置，根据抽取资源进行调整
category = &quot;01&quot; //轨迹分析类型
zlcqType='01' //需要调整,

bzkGxsjField='BZK_GXSJ_DATE'

//person node
personKey='zjhm' //key必须为小写字段名
personFieldes='ZJHM, XM' //需要导入图库人员信息节点属性的相关字段，必须包含Key字段
personLabel='person'

//guiji轨迹节点
guijiKey='lgid' //需要修改, key必须为小写字段名
guijiFieldes='LGID,LGMC' //需要修改，需要导入图库轨迹节点属性的相关字段
guijiLabel='hotel' //需要修改，轨迹节点标签名

//人的轨迹关系
relsKey='systemid' //key必须为小写字段名
//必须包含rels的主键字段和其属性字段，还需要包含startNode和endNode的主键字段
relsFieldes='SYSTEMID,ZJHM,LGID,FJH,RZSJ,TFSJ' //需要修改，需要导入的轨迹关系属性的相关字段，必须包含全部的主键
relsLabel='lgzs' //需要修改，轨迹关系标签名



// #################################################################################################################################
//以下内容为模版配置不需要修改调整，固定程序配置，可了解
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;旅馆住宿数据&quot;&gt;旅馆住宿数据&lt;/h3&gt;
&lt;p&gt;如旅馆住宿信息表&lt;/p&gt;

&lt;p&gt;Oracle数据必须字段&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zjhm：证件号码
xm：姓名
lgid:旅馆ID
fjh：房间号
rzsj：入住时间
tfsj：退房时间
bzk_gxsj：标准库更新时间
bzk_gxsj_date：标准库更新时间（date类型)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意： 根据现场的字段信息修改调整脚本中对应的personInputSql、personHotelInputSql、personHotelInputSql语句中的查询字段名。&lt;/p&gt;

&lt;h3 id=&quot;执行脚本检查并生成graph模型&quot;&gt;执行脚本检查并生成Graph模型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/share/dse-graph-loader/scripts/loadJdbc

graphloader oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注： graphloader命令参数详细解&lt;/strong&gt;
oracle_model.groovy ： 为脚本导入的脚本文件名称
-graph test01  ：代表导入的图表为test1,这个只是测试图表
-address dse01  ：DSE图数据库地址，这个dse01可以使用hostname，可以是集群的任何一个启动Graph的节点的ip地址和hostname,也可以是直接导入机器localhost
-username admin  ：DSE集群启动认证的用户名（默认的用户）
-passaword hnzx@123   ：DSE集群启动认证的用户密码（默认的默认）
-dryrun true 启动脚本检查测试，不会真正执行结果，只是测试脚本运行是否正常。&lt;/p&gt;

&lt;p&gt;运行情况： 如果出现 DSE Loader Succes,那么证明执行成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@dse02 ~]# 
[root@dse02 ~]# 
[root@dse02 ~]# cd /usr/share/dse-graph-loader/scripts/loadJdbc
[root@dse02 loadJdbc]# 
[root@dse02 loadJdbc]# 
[root@dse02 loadJdbc]# graphloader oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
/usr/java/latest/bin/java -Xms1691M -Xmx1691M -Dio.netty.tmpdir=/tmp -Djava.io.tmpdir=/tmp -cp :/usr/share/dse-g-loader/dse-graph-loader-1.0.1/*:/usr/share/dse-g-loader/dse-graph-loader-1.0.1/lib/* com.datastax.dsegraphloader.cli.Executable oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration address=dse01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration username=admin
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration graph=test01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration password=&amp;lt;redacted&amp;gt;
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration dryrun=true
2018-06-18 17:45:03 INFO  ClockFactory:52 - Using native clock to generate timestamps.
2018-06-18 17:45:03 INFO  NettyUtil:83 - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
2018-06-18 17:45:04 WARN  ReplicationStrategy$NetworkTopologyStrategy:200 - Error while computing token map for keyspace system_auth with datacenter dc1: could not achieve replication factor 3 (found 2 replicas only), check your keyspace replication settings.
2018-06-18 17:45:04 INFO  DCAwareRoundRobinPolicy:95 - Using data-center name 'dc1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host dse01/192.168.19.30:9042 added
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host /192.168.19.31:9042 added
2018-06-18 17:45:07 INFO  JDBCSource:239 - Update [update B_DSE_LOADER_CONFIG set zlcq_zt = '2' where zlcq_type = '01'] date success, The updated data volume is 1
2018-06-18 17:45:07 INFO  Executable:155 - The groovy script reads to see if schema is created [create_schema:true]
2018-06-18 17:45:07 WARN  Executable:165 - As of DGL 6.0, transformation functions will be dep
...
...
...

2018-06-18 17:45:17 INFO  Executable:304 - DSE Loader Succes, TotalTime : 4 S
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;数据建模语句&quot;&gt;数据建模语句&lt;/h3&gt;

&lt;p&gt;以下为通过 -dryrun true生成的模型以及索引&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;//旅馆住宿信息Schema
schema.propertyKey('systemid').Text().single().create()
schema.propertyKey('lgmc').Text().single().create()
schema.propertyKey('lgid').Text().single().create()
schema.propertyKey('xm').Text().single().create()
schema.propertyKey('fjh').Text().single().create()
schema.propertyKey('rzsj').Decimal().single().create()
schema.propertyKey('zjhm').Text().single().create()
schema.propertyKey('tfsj').Decimal().single().create()
schema.vertexLabel('person').properties('zjhm', 'xm').create()
schema.vertexLabel('hotel').properties('lgid', 'lgmc').create()
schema.edgeLabel('lgzs').properties('systemid', 'fjh', 'tfsj', 'rzsj').connection('person', 'hotel').create()

//Vertex Index
schema.vertexLabel('person').index('byXm').materialized().by('xm').add()
schema.vertexLabel('person').index('byZjhm').materialized().by('zjhm').add()
schema.vertexLabel('hotel').index('byLgid').materialized().by('lgid').add()
schema.vertexLabel('hotel').index('byLgmc').materialized().by('lgmc').add()

schema.vertexLabel('person').index('search').search().by('xm').by('zjhm').add()
schema.vertexLabel('hotel').index('search').search().by('lgid').by('lgmc').add()

//Edge Index
schema.vertexLabel('person').index('bySystemid').inE('lgzs').by('systemid').ifNotExists().add()
schema.vertexLabel('hotel').index('bySystemid').inE('lgzs').by('systemid').ifNotExists().add()
schema.vertexLabel('hotel').index('ratedBySystemid').outE('lgzs').by('systemid').ifNotExists().add()
schema.vertexLabel('person').index('ratedBySystemid').outE('lgzs').by('systemid').ifNotExists().add()
schema.vertexLabel('person').index('byFjh').inE('lgzs').by('fjh').ifNotExists().add()
schema.vertexLabel('hotel').index('byFjh').inE('lgzs').by('fjh').ifNotExists().add()
schema.vertexLabel('hotel').index('ratedByFjh').outE('lgzs').by('fjh').ifNotExists().add()
schema.vertexLabel('person').index('ratedByFjh').outE('lgzs').by('fjh').ifNotExists().add()
schema.vertexLabel('person').index('byRzsj').inE('lgzs').by('rzsj').ifNotExists().add()
schema.vertexLabel('hotel').index('byRzsj').inE('lgzs').by('rzsj').ifNotExists().add()
schema.vertexLabel('hotel').index('ratedByRzsj').outE('lgzs').by('rzsj').ifNotExists().add()
schema.vertexLabel('person').index('ratedByRzsj').outE('lgzs').by('rzsj').ifNotExists().add()
schema.vertexLabel('person').index('byTfsj').inE('lgzs').by('tfsj').ifNotExists().add()
schema.vertexLabel('hotel').index('byTfsj').inE('lgzs').by('tfsj').ifNotExists().add()
schema.vertexLabel('hotel').index('ratedByTfsj').outE('lgzs').by('tfsj').ifNotExists().add()
schema.vertexLabel('person').index('ratedByTfsj').outE('lgzs').by('tfsj').ifNotExists().add()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面模型创建后，后续不自动创建模型，需要修改base.groovy配置参数
create_schema都修改为false&lt;/p&gt;

&lt;h3 id=&quot;数据全量抽取&quot;&gt;数据全量抽取&lt;/h3&gt;

&lt;h4 id=&quot;修改配置表增量时间&quot;&gt;修改配置表增量时间&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;UPDATE B_DSE_LOADER_CONFIG t
SET t.ZLCQ_KSSJ = to_date('1990-01-01 0:00:00','yyyy-mm-dd hh24:mi:ss'), t.ZLCQ_JSSJ = to_date('1990-01-01 0:00:00','yyyy-mm-dd HH24:MI:SS') WHERE CATEGORY = 01 and ZLCQ_TYPE = 01;
commit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更新后查询验证&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.ZLCQ_KSSJ, t.ZLCQ_JSSJ from B_DSE_LOADER_CONFIG t where CATEGORY = 01 and ZLCQ_TYPE = 01;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;执行抽取命令&quot;&gt;执行抽取命令&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/share/dse-graph-loader/scripts/loadJdbc

graphloader oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相对于执行脚本检查命令只是少了个参数-dryrun true&lt;/p&gt;

&lt;p&gt;**运行情况 **：
如果出现 DSE Loader Succes,那么证明执行成功,执行过程出现下面导入多少条记录信息
Current total additions: 7 vertices 6 edges 12 properties 0 anonymous
表示导入了7个顶点，6条边和12条属性记录。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@dse02 loadJdbc]# graphloader oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123
/usr/java/latest/bin/java -Xms1691M -Xmx1691M -Dio.netty.tmpdir=/tmp -Djava.io.tmpdir=/tmp -cp :/usr/share/dse-g-loader/dse-graph-loader-1.0.1/*:/usr/share/dse-g-loader/dse-graph-loader-1.0.1/lib/* com.datastax.dsegraphloader.cli.Executable oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration address=dse01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration username=admin
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration graph=test01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration password=&amp;lt;redacted&amp;gt;
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration dryrun=true
2018-06-18 17:45:03 INFO  ClockFactory:52 - Using native clock to generate timestamps.
2018-06-18 17:45:03 INFO  NettyUtil:83 - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
2018-06-18 17:45:04 WARN  ReplicationStrategy$NetworkTopologyStrategy:200 - Error while computing token map for keyspace system_auth with datacenter dc1: could not achieve replication factor 3 (found 2 replicas only), check your keyspace replication settings.
2018-06-18 17:45:04 INFO  DCAwareRoundRobinPolicy:95 - Using data-center name 'dc1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host dse01/192.168.19.30:9042 added
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host /192.168.19.31:9042 added

....
...
...
2018-06-18 17:47:43 INFO  Reporter:101 - Current total additions: 7 vertices 6 edges 12 properties 0 anonymous
2018-06-18 17:47:43 INFO  Reporter:104 - 25 total elements written
...
...
...
2018-06-18 17:47:45 INFO  Executable:304 - DSE Loader Succes, TotalTime : 11 S
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;数据增量抽取&quot;&gt;数据增量抽取&lt;/h3&gt;

&lt;h4 id=&quot;创建执行调度shell脚本&quot;&gt;创建执行调度shell脚本&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/share/dse-graph-loader
mkdir graphloader_lgzs.sh
echo 'cd /usr/share/dse-graph-loader/scripts/loadJdbc' &amp;gt;&amp;gt; graphloader_lgzs.sh
echo '/usr/share/dse-graph-loader/graphloader oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123' &amp;gt;&amp;gt; graphloader_lgzs.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;定时调度&quot;&gt;定时调度&lt;/h4&gt;

&lt;p&gt;crontab添加前检查&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo -uroot /usr/share/dse-graph-loader/1.0.1/graphloader_lgzs.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过Linux的定时器crontab进行定时调度配置, 相关命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑添加定时器，每5分钟执行一次，或者每1小时执行一次&lt;/p&gt;

&lt;p&gt;每5分钟执行一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;*/5 * * * * /usr/share/dse-graph-loader/graphloader_lgzs.sh &amp;gt; /var/log/graphloader/lgzs/graphloader_lgzs.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每1小时执行一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt; 0 */1 * * *  /usr/share/dse-graph-loader/graphloader_lgzs.sh &amp;gt; /var/log/graphloader/lgzs/graphloader_lgzs.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置日志修改 每周星期六晚上11点重新命名日志文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;0 23 * * 6 /usr/share/dse-graph-loader/renamefile.sh lgzs graphloader_lgzs.log &amp;gt;&amp;gt; /var/log/graphloader/lgzs/graphloader_lgzs_renamefile.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;抽取调度执行结果检查&quot;&gt;抽取调度执行结果检查&lt;/h4&gt;

&lt;p&gt;可以检查/opt/graphloader_lgzs.log打印信息，也可以通过配置抽取log表检查&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.*, t.rowid from B_DSE_LOADER_LOG t order by create_time desc;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下图，比如我们设置每间隔1分钟执行一次，图下图日志情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1529338757622_48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;轨迹航班关系图-配置抽取&quot;&gt;轨迹航班关系图-配置抽取&lt;/h2&gt;

&lt;h4 id=&quot;抽取配置信息-1&quot;&gt;抽取配置信息&lt;/h4&gt;
&lt;p&gt;B_DSE_LOADER_CONFIG表,插入配置数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;insert into B_DSE_LOADER_CONFIG (SYSTEMID, CATEGORY, ZY_ZWMC, ZY_YWMC, ZY_QWK_VIEW, ZY_YYK_VIEW, ZY_WBZY_VIEW, ZY_KETTLE_MC, ZLCQ_KSSJ, ZLCQ_JSSJ, ZLCQ_ZT, ZLCQ_TYPE, BLZD1, BLZD2, BLZD3, BLZD4, BLZD5, CREATE_USER, CREATE_TIME, UPDATE_TIME, SCBZ)
values ('A685BE72D5E84572A374CD80DECE1F3D', '01', '民航出入港信息', 'T_BZ_MH_CRGXX', 'T_BZ_MH_CRGXX', 'T_BZ_MH_CRGXX', 'T_BZ_MH_CRGXX', 'ORACLE_DSE_T_BZ_MH_CRGXX', to_date('10-10-2017 14:42:59', 'dd-mm-yyyy hh24:mi:ss'), to_date('10-10-2017 14:42:59', 'dd-mm-yyyy hh24:mi:ss'), '1', '02', null, null, null, null, null, 'SYS', to_date('26-05-2018 22:56:54', 'dd-mm-yyyy hh24:mi:ss'), to_date('26-05-2018 22:56:54', 'dd-mm-yyyy hh24:mi:ss'), 0);
commit;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：CATEGORY=01代表轨迹关系图类别，ZLCQ_TYPE=02代表乘坐航班关系图的增量抽取类别
注意现场导入数据后，需要在创建视图库中创建的资源名为T_BZ_MH_CRGXX.&lt;/p&gt;

&lt;p&gt;验证插入数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.* from B_DSE_LOADER_CONFIG t where CATEGORY = 01 and ZLCQ_TYPE = 02;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;现场视图数据视图准备-1&quot;&gt;现场视图数据视图准备&lt;/h3&gt;
&lt;p&gt;现场需要根据旅馆住宿信息表，创建视图库后，创建资源名为T_BZ_LY_LGZSXX的视图。&lt;/p&gt;

&lt;p&gt;视图要求,必须包含字段&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段名&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;可为空&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SYSTEMID&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZJLX&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;证件类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZJHM&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;证件号码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CHN_NM&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;中文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FST_NM&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;英文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HBH&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;航班号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QFZ&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;起飞站&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DDZ&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;到达站&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HBRQ&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;航班日期，格式为年月日如:20160714&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QFSJ&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;起飞时间,必须为毫秒格式进行计算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DDSJ&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;退房时间,必须为毫秒格式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BZK_GXSJ_DATE&lt;/td&gt;
      &lt;td&gt;DATA&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量时间，DATE类型&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;还有其他需要抽取进图的全部字段。根据现场的资源情况而定，最好是其他全部字段都配置进视图。&lt;/p&gt;

&lt;h3 id=&quot;抽取脚本-1&quot;&gt;抽取脚本&lt;/h3&gt;
&lt;p&gt;模型是-人员旅馆住宿关系图&lt;/p&gt;

&lt;p&gt;脚本文件：&lt;code&gt;/usr/share/dse-graph-loader/scripts/loadJdbc/oracle_model_czhb.groovy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;脚本内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-grovy&quot;&gt;//需要修改配置，根据抽取资源进行调整
category = &quot;01&quot; //轨迹分析类型
zlcqType='02' //名航出入港&quot;乘坐航班&quot;关系图，需要调整

bzkGxsjField='BZK_GXSJ_DATE'

//person node
personKey='zjhm' //key必须为小写字段名
personFieldes='ZJHM, ZJLX, CHN_NM, FST_NM' //需要修改，需要导入图库人员信息节点属性的相关字段，必须包含Key字段
personLabel='person'

//guiji轨迹节点
guijiKey='hbh' //需要修改, key必须为小写字段名
guijiFieldes='HBH, QFZ, DDZ' //需要修改，需要导入图库轨迹节点属性的相关字段
guijiLabel='flight' //需要修改，轨迹节点标签名

//人的轨迹关系
relsKey='systemid' //key必须为小写字段名
//必须包含rels的主键字段和其属性字段，还需要包含startNode和endNode的主键字段
relsFieldes='SYSTEMID, ZJHM, HBH, QFZ, DDZ, HBRQ, QFSJ, DDSJ' //需要修改，需要导入的轨迹关系属性的相关字段，必须包含全部的主键
relsLabel='czhb' //需要修改，轨迹关系标签名

// #################################################################################################################################
//以下内容为模版配置不需要修改调整，固定程序配置，可了解
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;航班信息数据&lt;/strong&gt;
名航出入港信息表&lt;/p&gt;

&lt;p&gt;Oracle数据字段必须包含&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ZJLX ： 证件类型
ZJHM ： 证件号码
CHN_NM ： 中文名
FST_NM ： 英文名
HBH ： 航班号
QFZ ： 起飞站
DDZ ： 到达站
HBRQ ： 航班日期
QFSJ ： 起飞时间
DDSJ ： 到达时间
bzk_gxsj_date：标准库更新时间（date类型)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意： 根据现场的字段信息修改调整脚本中对应的personInputSql、personHotelInputSql、personHotelInputSql语句中的查询字段名。&lt;/p&gt;

&lt;h3 id=&quot;执行脚本检查并生成graph模型-1&quot;&gt;执行脚本检查并生成Graph模型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/share/dse-graph-loader/scripts/loadJdbc

graphloader oracle_model_czhb.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注： graphloader命令参数详细解&lt;/strong&gt;
oracle_model.groovy ： 为脚本导入的脚本文件名称
-graph test01  ：代表导入的图表为test1,这个只是测试图表
-address dse01  ：DSE图数据库地址，这个dse01可以使用hostname，可以是集群的任何一个启动Graph的节点的ip地址和hostname,也可以是直接导入机器localhost
-username admin  ：DSE集群启动认证的用户名（默认的用户）
-passaword hnzx@123   ：DSE集群启动认证的用户密码（默认的默认）
-dryrun true 启动脚本检查测试，不会真正执行结果，只是测试脚本运行是否正常。&lt;/p&gt;

&lt;p&gt;运行情况： 如果出现 DSE Loader Succes,那么证明执行成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@dse02 ~]# 
[root@dse02 ~]# 
[root@dse02 ~]# cd /usr/share/dse-graph-loader/scripts/loadJdbc
[root@dse02 loadJdbc]# 
[root@dse02 loadJdbc]# 
[root@dse02 loadJdbc]# graphloader oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
/usr/java/latest/bin/java -Xms1691M -Xmx1691M -Dio.netty.tmpdir=/tmp -Djava.io.tmpdir=/tmp -cp :/usr/share/dse-g-loader/dse-graph-loader-1.0.1/*:/usr/share/dse-g-loader/dse-graph-loader-1.0.1/lib/* com.datastax.dsegraphloader.cli.Executable oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration address=dse01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration username=admin
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration graph=test01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration password=&amp;lt;redacted&amp;gt;
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration dryrun=true
2018-06-18 17:45:03 INFO  ClockFactory:52 - Using native clock to generate timestamps.
2018-06-18 17:45:03 INFO  NettyUtil:83 - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
2018-06-18 17:45:04 WARN  ReplicationStrategy$NetworkTopologyStrategy:200 - Error while computing token map for keyspace system_auth with datacenter dc1: could not achieve replication factor 3 (found 2 replicas only), check your keyspace replication settings.
2018-06-18 17:45:04 INFO  DCAwareRoundRobinPolicy:95 - Using data-center name 'dc1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host dse01/192.168.19.30:9042 added
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host /192.168.19.31:9042 added
2018-06-18 17:45:07 INFO  JDBCSource:239 - Update [update B_DSE_LOADER_CONFIG set zlcq_zt = '2' where zlcq_type = '01'] date success, The updated data volume is 1
2018-06-18 17:45:07 INFO  Executable:155 - The groovy script reads to see if schema is created [create_schema:true]
2018-06-18 17:45:07 WARN  Executable:165 - As of DGL 6.0, transformation functions will be dep
...
...
...

2018-06-18 17:45:17 INFO  Executable:304 - DSE Loader Succes, TotalTime : 4 S
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;数据全量抽取-1&quot;&gt;数据全量抽取&lt;/h3&gt;

&lt;h4 id=&quot;修改配置表增量时间-1&quot;&gt;修改配置表增量时间&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;UPDATE B_DSE_LOADER_CONFIG t
SET t.ZLCQ_KSSJ = to_date('1990-01-01 0:00:00','yyyy-mm-dd hh24:mi:ss'), t.ZLCQ_JSSJ = to_date('1990-01-01 0:00:00','yyyy-mm-dd HH24:MI:SS') WHERE CATEGORY = 01 and ZLCQ_TYPE = 02;
commit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更新后查询验证&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.ZLCQ_KSSJ, t.ZLCQ_JSSJ from B_DSE_LOADER_CONFIG t where CATEGORY = 01 and ZLCQ_TYPE = 02;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;执行抽取命令-1&quot;&gt;执行抽取命令&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/share/dse-graph-loader/scripts/loadJdbc

graphloader oracle_model_czhb.groovy -graph test01 -address dse01 -username admin -password hnzx@123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相对于执行脚本检查命令只是少了个参数-dryrun true&lt;/p&gt;

&lt;p&gt;**运行情况 **：
如果出现 DSE Loader Succes,那么证明执行成功,执行过程出现下面导入多少条记录信息
Current total additions: 7 vertices 6 edges 12 properties 0 anonymous
表示导入了7个顶点，6条边和12条属性记录。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@dse02 loadJdbc]# graphloader oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123
/usr/java/latest/bin/java -Xms1691M -Xmx1691M -Dio.netty.tmpdir=/tmp -Djava.io.tmpdir=/tmp -cp :/usr/share/dse-g-loader/dse-graph-loader-1.0.1/*:/usr/share/dse-g-loader/dse-graph-loader-1.0.1/lib/* com.datastax.dsegraphloader.cli.Executable oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration address=dse01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration username=admin
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration graph=test01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration password=&amp;lt;redacted&amp;gt;
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration dryrun=true
2018-06-18 17:45:03 INFO  ClockFactory:52 - Using native clock to generate timestamps.
2018-06-18 17:45:03 INFO  NettyUtil:83 - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
2018-06-18 17:45:04 WARN  ReplicationStrategy$NetworkTopologyStrategy:200 - Error while computing token map for keyspace system_auth with datacenter dc1: could not achieve replication factor 3 (found 2 replicas only), check your keyspace replication settings.
2018-06-18 17:45:04 INFO  DCAwareRoundRobinPolicy:95 - Using data-center name 'dc1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host dse01/192.168.19.30:9042 added
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host /192.168.19.31:9042 added

....
...
...
2018-06-18 17:47:43 INFO  Reporter:101 - Current total additions: 7 vertices 6 edges 12 properties 0 anonymous
2018-06-18 17:47:43 INFO  Reporter:104 - 25 total elements written
...
...
...
2018-06-18 17:47:45 INFO  Executable:304 - DSE Loader Succes, TotalTime : 11 S
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;数据增量抽取-1&quot;&gt;数据增量抽取&lt;/h3&gt;

&lt;h4 id=&quot;创建执行调度shell脚本-1&quot;&gt;创建执行调度shell脚本&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo cd /usr/share/dse-graph-loader
sudo mkdir graphloader_czhb.sh
sudo echo 'cd /usr/share/dse-graph-loader/scripts/loadJdbc' &amp;gt;&amp;gt; graphloader_czhb.sh
sudo echo '/usr/share/dse-graph-loader/graphloader oracle_model_czhb.groovy -graph test01 -address dse01 -username admin -password hnzx@123' &amp;gt;&amp;gt; graphloader_czhb.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;定时调度-1&quot;&gt;定时调度&lt;/h4&gt;

&lt;p&gt;创建定时调度前先创建日志文件目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo mkdir -p /var/log/graphloader/czhb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：其中的czh为每个关系图标签名称&lt;/p&gt;

&lt;p&gt;crontab添加前检查&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo -uroot /usr/share/dse-graph-loader/graphloader_czhb.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过Linux的定时器crontab进行定时调度配置, 相关命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑添加定时器，每5分钟执行一次，或者每1小时执行一次&lt;/p&gt;

&lt;p&gt;每10分钟执行一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;*/10 * * * * /usr/share/dse-graph-loader/graphloader_czhb.sh &amp;gt; /var/log/graphloader/czhb/graphloader_czhb.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每1小时执行一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt; 0 */1 * * *  /usr/share/dse-graph-loader/graphloader_czhb.sh &amp;gt; /var/log/graphloader/czhb/graphloader_czhb.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置日志修改 每周星期六晚上11点重新命名日志文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;0 23 * * 6 /usr/share/dse-graph-loader/renamefile.sh czhb graphloader_czhb.log &amp;gt;&amp;gt; /var/log/graphloader/czhb/graphloader_czhb_renamefile.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;抽取调度执行结果检查-1&quot;&gt;抽取调度执行结果检查&lt;/h4&gt;

&lt;p&gt;可以检查/opt/graphloader_lgzs.log打印信息，也可以通过配置抽取log表检查&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.*, t.rowid from B_DSE_LOADER_LOG t where t.category = 01 and zlcq_type = 02 order by create_time desc;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下图，比如我们设置每间隔10分钟执行一次，图下图日志情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:8081/assets/msg/upload/1529338757622_48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;轨迹火车关系图-配置抽取&quot;&gt;轨迹火车关系图-配置抽取&lt;/h2&gt;

&lt;h3 id=&quot;抽取配置信息-2&quot;&gt;抽取配置信息&lt;/h3&gt;
&lt;p&gt;B_DSE_LOADER_CONFIG表,插入配置数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;insert into B_DSE_LOADER_CONFIG (SYSTEMID, CATEGORY, ZY_ZWMC, ZY_YWMC, ZY_QWK_VIEW, ZY_YYK_VIEW, ZY_WBZY_VIEW, ZY_KETTLE_MC, ZLCQ_KSSJ, ZLCQ_JSSJ, ZLCQ_ZT, ZLCQ_TYPE, BLZD1, BLZD2, BLZD3, BLZD4, BLZD5, CREATE_USER, CREATE_TIME, UPDATE_TIME, SCBZ)
values ('533FA13A99F74ACDA805C5C2E0FC1E9D', '01', '乘坐火车信息', 'T_BZ_HCSK_GPXX', 'T_BZ_HCSK_GPXX', 'T_BZ_HCSK_GPXX', 'T_BZ_HCSK_GPXX', 'ORACLE_DSE_T_BZ_HCSK_GPXX', to_date('10-10-2017 14:42:59', 'dd-mm-yyyy hh24:mi:ss'), to_date('10-10-2010 14:42:59', 'dd-mm-yyyy hh24:mi:ss'), '1', '03', null, null, null, null, null, 'SYS', to_date('26-05-2018 22:56:54', 'dd-mm-yyyy hh24:mi:ss'), to_date('26-05-2010 22:56:54', 'dd-mm-yyyy hh24:mi:ss'), 0);
commit;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：CATEGORY=01代表轨迹关系图类别，ZLCQ_TYPE=03代表乘坐航班关系图的增量抽取类别
注意现场导入数据后，需要在创建视图库中创建的资源名为T_BZ_HCSK_GPXX&lt;/p&gt;

&lt;p&gt;验证插入数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.* from B_DSE_LOADER_CONFIG t where CATEGORY = 01 and ZLCQ_TYPE = 03;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1530673721770_18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;现场视图数据视图准备-2&quot;&gt;现场视图数据视图准备&lt;/h3&gt;
&lt;p&gt;现场需要根据旅馆住宿信息表，创建视图库后，创建资源名为T_BZ_LY_LGZSXX的视图。&lt;/p&gt;

&lt;p&gt;视图要求,必须包含字段&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段名&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;可为空&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SYSTEMID&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;主键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZJLX&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;证件类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZJHM&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;证件号码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CHN_NM&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;中文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FST_NM&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;英文名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CC&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;车次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SFZ&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;始发站&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ZDZ&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;终点站&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FCRQ&lt;/td&gt;
      &lt;td&gt;VARCHAR2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;发车日期，格式为年月日如:20160714&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FCSJ&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;发车时间,必须为毫秒格式进行计算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DDSJ&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;到达时间,必须为毫秒格式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BZK_GXSJ_DATE&lt;/td&gt;
      &lt;td&gt;DATA&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;增量时间，DATE类型&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;还有其他需要抽取进图的全部字段。根据现场的资源情况而定，最好是其他全部字段都配置进视图。&lt;/p&gt;

&lt;h3 id=&quot;抽取脚本-2&quot;&gt;抽取脚本&lt;/h3&gt;
&lt;p&gt;模型是-人员旅馆住宿关系图&lt;/p&gt;

&lt;p&gt;脚本文件：&lt;code&gt;/usr/share/dse-graph-loader/scripts/loadJdbc/oracle_model_czhc.groovy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;脚本内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-grovy&quot;&gt;//需要修改配置，根据抽取资源进行调整
category = &quot;01&quot; //轨迹分析类型
zlcqType='03' //名航出入港&quot;乘坐火车&quot;关系图，需要调整

bzkGxsjField='BZK_GXSJ_DATE'

//person node
personKey='zjhm' //key必须为小写字段名
personFieldes='ZJHM, ZJLX, CHN_NM, FST_NM' //需要修改，需要导入图库人员信息节点属性的相关字段，必须包含Key字段
personLabel='person'

//guiji轨迹节点
guijiKey='hbh' //需要修改, key必须为小写字段名
guijiFieldes='CC, SFZ, ZDZ' //需要修改，需要导入图库轨迹节点属性的相关字段
guijiLabel='flight' //需要修改，轨迹节点标签名

//人的轨迹关系
relsKey='systemid' //key必须为小写字段名
//必须包含rels的主键字段和其属性字段，还需要包含startNode和endNode的主键字段
relsFieldes='SYSTEMID, ZJHM, CC, SFZ, ZDZ, FCRQ, FFSJ, DDSJ' //需要修改，需要导入的轨迹关系属性的相关字段，必须包含全部的主键
relsLabel='czhb' //需要修改，轨迹关系标签名

// #################################################################################################################################
//以下内容为模版配置不需要修改调整，固定程序配置，可了解
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;航班信息数据&lt;/strong&gt;
名航出入港信息表&lt;/p&gt;

&lt;p&gt;Oracle数据字段必须包含&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ZJLX ： 证件类型
ZJHM ： 证件号码
CHN_NM ： 中文名
FST_NM ： 英文名
HBH ： 航班号
QFZ ： 起飞站
DDZ ： 到达站
HBRQ ： 航班日期
QFSJ ： 起飞时间
DDSJ ： 到达时间
bzk_gxsj_date：标准库更新时间（date类型)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意： 根据现场的字段信息修改调整脚本中对应的personInputSql、personHotelInputSql、personHotelInputSql语句中的查询字段名。&lt;/p&gt;

&lt;h3 id=&quot;执行脚本检查并生成graph模型-2&quot;&gt;执行脚本检查并生成Graph模型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/share/dse-graph-loader/scripts/loadJdbc

graphloader oracle_model_czhc.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注： graphloader命令参数详细解&lt;/strong&gt;
oracle_model.groovy ： 为脚本导入的脚本文件名称
-graph test01  ：代表导入的图表为test1,这个只是测试图表
-address dse01  ：DSE图数据库地址，这个dse01可以使用hostname，可以是集群的任何一个启动Graph的节点的ip地址和hostname,也可以是直接导入机器localhost
-username admin  ：DSE集群启动认证的用户名（默认的用户）
-passaword hnzx@123   ：DSE集群启动认证的用户密码（默认的默认）
-dryrun true 启动脚本检查测试，不会真正执行结果，只是测试脚本运行是否正常。&lt;/p&gt;

&lt;p&gt;运行情况： 如果出现 DSE Loader Succes,那么证明执行成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@dse02 ~]# 
[root@dse02 ~]# 
[root@dse02 ~]# cd /usr/share/dse-graph-loader/scripts/loadJdbc
[root@dse02 loadJdbc]# 
[root@dse02 loadJdbc]# 
[root@dse02 loadJdbc]# graphloader oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
/usr/java/latest/bin/java -Xms1691M -Xmx1691M -Dio.netty.tmpdir=/tmp -Djava.io.tmpdir=/tmp -cp :/usr/share/dse-g-loader/dse-graph-loader-1.0.1/*:/usr/share/dse-g-loader/dse-graph-loader-1.0.1/lib/* com.datastax.dsegraphloader.cli.Executable oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration address=dse01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration username=admin
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration graph=test01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration password=&amp;lt;redacted&amp;gt;
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration dryrun=true
2018-06-18 17:45:03 INFO  ClockFactory:52 - Using native clock to generate timestamps.
2018-06-18 17:45:03 INFO  NettyUtil:83 - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
2018-06-18 17:45:04 WARN  ReplicationStrategy$NetworkTopologyStrategy:200 - Error while computing token map for keyspace system_auth with datacenter dc1: could not achieve replication factor 3 (found 2 replicas only), check your keyspace replication settings.
2018-06-18 17:45:04 INFO  DCAwareRoundRobinPolicy:95 - Using data-center name 'dc1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host dse01/192.168.19.30:9042 added
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host /192.168.19.31:9042 added
2018-06-18 17:45:07 INFO  JDBCSource:239 - Update [update B_DSE_LOADER_CONFIG set zlcq_zt = '2' where zlcq_type = '01'] date success, The updated data volume is 1
2018-06-18 17:45:07 INFO  Executable:155 - The groovy script reads to see if schema is created [create_schema:true]
2018-06-18 17:45:07 WARN  Executable:165 - As of DGL 6.0, transformation functions will be dep
...
...
...

2018-06-18 17:45:17 INFO  Executable:304 - DSE Loader Succes, TotalTime : 4 S
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;数据全量抽取-2&quot;&gt;数据全量抽取&lt;/h3&gt;

&lt;h4 id=&quot;修改配置表增量时间-2&quot;&gt;修改配置表增量时间&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;UPDATE B_DSE_LOADER_CONFIG t
SET t.ZLCQ_KSSJ = to_date('1990-01-01 0:00:00','yyyy-mm-dd hh24:mi:ss'), t.ZLCQ_JSSJ = to_date('1990-01-01 0:00:00','yyyy-mm-dd HH24:MI:SS') WHERE CATEGORY = 01 and ZLCQ_TYPE = 03;
commit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更新后查询验证&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.ZLCQ_KSSJ, t.ZLCQ_JSSJ from B_DSE_LOADER_CONFIG t where CATEGORY = 01 and ZLCQ_TYPE = 03;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;执行抽取命令-2&quot;&gt;执行抽取命令&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/share/dse-graph-loader/scripts/loadJdbc

graphloader oracle_model_czhc.groovy -graph test01 -address dse01 -username admin -password hnzx@123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相对于执行脚本检查命令只是少了个参数-dryrun true&lt;/p&gt;

&lt;p&gt;**运行情况 **：
如果出现 DSE Loader Succes,那么证明执行成功,执行过程出现下面导入多少条记录信息
Current total additions: 7 vertices 6 edges 12 properties 0 anonymous
表示导入了7个顶点，6条边和12条属性记录。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@dse02 loadJdbc]# graphloader oracle_model_czhc.groovy -graph test01 -address dse01 -username admin -password hnzx@123
/usr/java/latest/bin/java -Xms1691M -Xmx1691M -Dio.netty.tmpdir=/tmp -Djava.io.tmpdir=/tmp -cp :/usr/share/dse-g-loader/dse-graph-loader-1.0.1/*:/usr/share/dse-g-loader/dse-graph-loader-1.0.1/lib/* com.datastax.dsegraphloader.cli.Executable oracle_model.groovy -graph test01 -address dse01 -username admin -password hnzx@123 -dryrun true
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration address=dse01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration username=admin
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration graph=test01
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration password=&amp;lt;redacted&amp;gt;
2018-06-18 17:45:02 INFO  Executable:119 - Setting configuration dryrun=true
2018-06-18 17:45:03 INFO  ClockFactory:52 - Using native clock to generate timestamps.
2018-06-18 17:45:03 INFO  NettyUtil:83 - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
2018-06-18 17:45:04 WARN  ReplicationStrategy$NetworkTopologyStrategy:200 - Error while computing token map for keyspace system_auth with datacenter dc1: could not achieve replication factor 3 (found 2 replicas only), check your keyspace replication settings.
2018-06-18 17:45:04 INFO  DCAwareRoundRobinPolicy:95 - Using data-center name 'dc1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host dse01/192.168.19.30:9042 added
2018-06-18 17:45:04 INFO  Cluster:1543 - New Cassandra host /192.168.19.31:9042 added

....
...
...
2018-06-18 17:47:43 INFO  Reporter:101 - Current total additions: 7 vertices 6 edges 12 properties 0 anonymous
2018-06-18 17:47:43 INFO  Reporter:104 - 25 total elements written
...
...
...
2018-06-18 17:47:45 INFO  Executable:304 - DSE Loader Succes, TotalTime : 11 S
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;数据增量抽取-2&quot;&gt;数据增量抽取&lt;/h3&gt;

&lt;h4 id=&quot;创建执行调度shell脚本-2&quot;&gt;创建执行调度shell脚本&lt;/h4&gt;

&lt;p&gt;创建crontab执行命令文件graphloader_czhc.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/share/dse-graph-loader/
mkdir graphloader_czhc.sh
echo 'cd /usr/share/dse-graph-loader/scripts/loadJdbc' &amp;gt;&amp;gt; graphloader_czhc.sh
echo '/usr/share/dse-graph-loader/graphloader oracle_model_czhc.groovy -graph test01 -address dse01 -username admin -password hnzx@123' &amp;gt;&amp;gt; graphloader_czhc.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;定时调度-2&quot;&gt;定时调度&lt;/h4&gt;

&lt;p&gt;crontab添加前检查&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo -uroot /usr/share/dse-graph-loader/graphloader_czhc.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过Linux的定时器crontab进行定时调度配置, 相关命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑添加定时器，每5分钟执行一次，或者每1小时执行一次&lt;/p&gt;

&lt;p&gt;每5分钟执行一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;*/5 * * * * /usr/share/dse-graph-loader/graphloader_czhc.sh &amp;gt; /var/log/graphloader/czhb/graphloader_czhc.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每1小时执行一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt; 0 */1 * * *  /usr/share/dse-graph-loader/graphloader_czhc.sh &amp;gt; /var/log/graphloader/czhb/graphloader_czhc.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置日志修改 每周星期六晚上11点重新命名日志文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;0 23 * * 6 /usr/share/dse-graph-loader/renamefile.sh czhc graphloader_czhc.log &amp;gt;&amp;gt; /var/log/graphloader/czhc/graphloader_czhb_renamefile.log  2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;抽取调度执行结果检查-2&quot;&gt;抽取调度执行结果检查&lt;/h4&gt;

&lt;p&gt;可以检查/opt/graphloader_lgzs.log打印信息，也可以通过配置抽取log表检查&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select t.*, t.rowid from B_DSE_LOADER_LOG t where t.category = 01 and zlcq_type = 03 order by create_time desc;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下图，比如我们设置每间隔1分钟执行一次，图下图日志情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1529338757622_48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;END!&lt;/p&gt;</content><author><name></name></author><category term="图库" /><summary type="html">安装GraphLoader</summary></entry><entry><title type="html">测试</title><link href="http://localhost:4000/_posts/2018-05-15-test/" rel="alternate" type="text/html" title="测试" /><published>2018-05-15T00:00:00+08:00</published><updated>2018-05-15T00:00:00+08:00</updated><id>http://localhost:4000/_posts/test</id><content type="html" xml:base="http://localhost:4000/_posts/2018-05-15-test/">&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;

&lt;h3 id=&quot;测试1&quot;&gt;测试1&lt;/h3&gt;</content><author><name></name></author><category term="测试" /><summary type="html">测试</summary></entry><entry><title type="html">Neo4j图库建模手册</title><link href="http://localhost:4000/_posts/2018-05-15-Neo4j%E5%9B%BE%E5%BA%93%E5%BB%BA%E6%A8%A1%E6%89%8B%E5%86%8C/" rel="alternate" type="text/html" title="Neo4j图库建模手册" /><published>2018-05-15T00:00:00+08:00</published><updated>2018-05-15T00:00:00+08:00</updated><id>http://localhost:4000/_posts/Neo4j%E5%9B%BE%E5%BA%93%E5%BB%BA%E6%A8%A1%E6%89%8B%E5%86%8C</id><content type="html" xml:base="http://localhost:4000/_posts/2018-05-15-Neo4j%E5%9B%BE%E5%BA%93%E5%BB%BA%E6%A8%A1%E6%89%8B%E5%86%8C/">&lt;h2 id=&quot;模型分析&quot;&gt;模型分析&lt;/h2&gt;

&lt;p&gt;典型人员轨迹分析：旅馆同住、同火车、同航班…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514965748312_10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;定义：
圆圈代表顶点信息&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;红色代表：User人员信息&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;蓝色代表：Hotel旅馆住宿信息&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;绿色代表：Train火车信息&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;紫色代表：Flight航班信息&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单向线条代表边&lt;/p&gt;

&lt;h3 id=&quot;人&quot;&gt;人&lt;/h3&gt;

&lt;p&gt;人包含：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;人员信息节点&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;人又下面的行为关系&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;ul&gt;
      &lt;li&gt;旅馆住宿&lt;/li&gt;
      &lt;li&gt;乘坐火车&lt;/li&gt;
      &lt;li&gt;乘坐航班&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;人员信息-节点&quot;&gt;人员信息-节点&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514965842285_46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：User&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;属性包含：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;证件号码 ‘zjhm:522… ‘&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;证件类型 ‘zjlx:身份证’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;姓名 ‘xm:张三’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建时间 ‘createTime:2017..’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新时间 ‘updateTime:2017…’&lt;/p&gt;

    &lt;p&gt;注意：其他详细信息通过zjhm和zjlx去常口或者其他业务表进行查询。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;User&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User&lt;/td&gt;
      &lt;td&gt;zjhm&lt;/td&gt;
      &lt;td&gt;证件号码&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User&lt;/td&gt;
      &lt;td&gt;zjlx&lt;/td&gt;
      &lt;td&gt;证件类型&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User&lt;/td&gt;
      &lt;td&gt;xm&lt;/td&gt;
      &lt;td&gt;姓名&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User&lt;/td&gt;
      &lt;td&gt;createTime&lt;/td&gt;
      &lt;td&gt;创建时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User&lt;/td&gt;
      &lt;td&gt;updateTime&lt;/td&gt;
      &lt;td&gt;更新时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;对应关系&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;旅馆住宿&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;乘坐火车&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;乘坐航班&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;旅馆&quot;&gt;旅馆&lt;/h3&gt;

&lt;h4 id=&quot;旅馆信息-节点&quot;&gt;旅馆信息-节点&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;标签信息&lt;/strong&gt;：Hotel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图模型构建&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514965954365_67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意：其详细信息通过lgid去旅馆注册信息表查询节点：Hotel的结构&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;属性包含：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;旅馆顶点主键 ‘hotelId:lg2007&lt;/td&gt;
          &lt;td&gt;007’&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;旅馆ID ‘lgid:lg2007’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;旅馆名称 ‘lgmc:贵阳东山大酒店’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;房间号 ‘fjh:房间号’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建时间 ‘createTime:2017..’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新时间 ‘updateTime:2017…’&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;对应关系：&lt;/strong&gt;旅馆住宿&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;图模型数据结构&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Hotel&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hotel&lt;/td&gt;
      &lt;td&gt;hotelId&lt;/td&gt;
      &lt;td&gt;旅馆自定义主键&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hotel&lt;/td&gt;
      &lt;td&gt;lgid&lt;/td&gt;
      &lt;td&gt;旅馆ID&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hotel&lt;/td&gt;
      &lt;td&gt;lgmc&lt;/td&gt;
      &lt;td&gt;旅馆名称&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hotel&lt;/td&gt;
      &lt;td&gt;fjh&lt;/td&gt;
      &lt;td&gt;房间号&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hotel&lt;/td&gt;
      &lt;td&gt;createTime&lt;/td&gt;
      &lt;td&gt;创建时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hotel&lt;/td&gt;
      &lt;td&gt;updateTime&lt;/td&gt;
      &lt;td&gt;更新时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;旅馆住宿-关系人与旅馆&quot;&gt;旅馆住宿-关系（人与旅馆）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;关系标签：旅馆住宿&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图模型构建（&lt;/strong&gt;人—&amp;gt;旅馆信息关系&lt;strong&gt;）:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514966061786_37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;红色—代表User人员信息顶点蓝色—代表Hotel旅馆信息顶点&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关系属性：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原系统主键 yxt_id: PZKA232..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;入住时间 rzsj: 20171214091011&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;退房时间 tfsj: 20171215091011&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新时间 yxt_gxsj: 20171215091011&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;旅馆住宿关系的结构:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图模型数据结构&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;旅馆住宿&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;旅馆住宿&lt;/td&gt;
      &lt;td&gt;yxt_id&lt;/td&gt;
      &lt;td&gt;原系统主键&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;旅馆住宿&lt;/td&gt;
      &lt;td&gt;rzsj&lt;/td&gt;
      &lt;td&gt;入住时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;旅馆住宿&lt;/td&gt;
      &lt;td&gt;tfsj&lt;/td&gt;
      &lt;td&gt;退房时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;旅馆住宿&lt;/td&gt;
      &lt;td&gt;yxt_gxsj&lt;/td&gt;
      &lt;td&gt;原系统关系时间&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;火车&quot;&gt;火车&lt;/h3&gt;

&lt;h4 id=&quot;火车信息-节点&quot;&gt;火车信息-节点&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：Train&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模型构建:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514966165883_54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;属性包含：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;火车顶点主键: ‘trainId:cc2017&lt;/td&gt;
          &lt;td&gt;贵阳&lt;/td&gt;
          &lt;td&gt;广州’&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;车次: ‘cc:cc2017’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;始发站: ‘sfz:贵阳’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;终点站: ‘zdz:终点站’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建时间: ‘createTime:2017..’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新时间: ‘updateTime:2017…’&lt;/p&gt;

    &lt;p&gt;注意：其详细信息通过车次去原系统表查询&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Train的结构：&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Train&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Train&lt;/td&gt;
      &lt;td&gt;trianId&lt;/td&gt;
      &lt;td&gt;火车自定义主键&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Train&lt;/td&gt;
      &lt;td&gt;cc&lt;/td&gt;
      &lt;td&gt;车次&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Train&lt;/td&gt;
      &lt;td&gt;sfz&lt;/td&gt;
      &lt;td&gt;始发站&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Train&lt;/td&gt;
      &lt;td&gt;zdz&lt;/td&gt;
      &lt;td&gt;终点站&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Train&lt;/td&gt;
      &lt;td&gt;createTime&lt;/td&gt;
      &lt;td&gt;创建时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Train&lt;/td&gt;
      &lt;td&gt;updateTime&lt;/td&gt;
      &lt;td&gt;更新时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;乘坐火车-关系人与火车&quot;&gt;乘坐火车-关系（人与火车）&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;标签：&lt;/strong&gt;乘坐火车&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模型构建（人—&amp;gt;火车关系）：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514966292188_54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;属性包含：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原系统主键 yxt_id:PZKA232..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;发车日期 fcrq: 2017-12-14&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;发车时间 fcsj: 2017-12-14 09:10&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;到达时间 ddsj: 2017-12-14 20:50&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;原系统更新时间 yxt_gxsj:2017-12-14 20:50&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;乘坐火车关系结构&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐火车&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐火车&lt;/td&gt;
      &lt;td&gt;yxt_id&lt;/td&gt;
      &lt;td&gt;原系统主键&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐火车&lt;/td&gt;
      &lt;td&gt;fcrq&lt;/td&gt;
      &lt;td&gt;发车日期&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐火车&lt;/td&gt;
      &lt;td&gt;fcsj&lt;/td&gt;
      &lt;td&gt;发车时间&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐火车&lt;/td&gt;
      &lt;td&gt;ddsj&lt;/td&gt;
      &lt;td&gt;到达时间&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐火车&lt;/td&gt;
      &lt;td&gt;yxt_gxsj&lt;/td&gt;
      &lt;td&gt;原系统更新时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;民航&quot;&gt;民航&lt;/h3&gt;

&lt;h4 id=&quot;航班信息-节点&quot;&gt;航班信息-节点&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：Flight&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模型构建&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514966372449_32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;属性包含：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;航班信息顶点主键 ‘flightId:hbh2017&lt;/td&gt;
          &lt;td&gt;贵阳&lt;/td&gt;
          &lt;td&gt;广州’&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;航班号 ‘hbh:hbh2017’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;起飞站 ‘qfz:贵阳’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;终点站 ‘zdz:广州’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建时间 ‘createTime:2017..’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新时间 ‘updateTime:2017…’&lt;/p&gt;

    &lt;p&gt;注意：其详细信息通过航班号hbh去原系统表查询&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Flight的结构：&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Flight&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flight&lt;/td&gt;
      &lt;td&gt;flightId&lt;/td&gt;
      &lt;td&gt;航班自定义主键&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flight&lt;/td&gt;
      &lt;td&gt;hbh&lt;/td&gt;
      &lt;td&gt;航班号&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flight&lt;/td&gt;
      &lt;td&gt;qfz&lt;/td&gt;
      &lt;td&gt;始发站&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flight&lt;/td&gt;
      &lt;td&gt;zdz&lt;/td&gt;
      &lt;td&gt;终点站&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flight&lt;/td&gt;
      &lt;td&gt;createTime&lt;/td&gt;
      &lt;td&gt;创建时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flight&lt;/td&gt;
      &lt;td&gt;updateTime&lt;/td&gt;
      &lt;td&gt;更新时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;乘坐航班-关系人与航班&quot;&gt;乘坐航班-关系（人与航班）&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：乘坐航班&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模型构建（人—&amp;gt;航班信息关系）：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514966466033_38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;属性包含：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原系统主键 yxt_id: zbda…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;原系统更新时间 yxt_gxsj: 2017-12-14 20:50&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;航班日期 hbrq: 2017-12-14&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;起飞时间 qfsj: 2017-12-14 09:10&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;到达时间 ddsj: 2017-12-14 20:50&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;乘坐航班结构：&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐航班&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐航班&lt;/td&gt;
      &lt;td&gt;yxt_id&lt;/td&gt;
      &lt;td&gt;原系统主键&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐航班&lt;/td&gt;
      &lt;td&gt;yxt_gxsj&lt;/td&gt;
      &lt;td&gt;原系统更新时间&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐航班&lt;/td&gt;
      &lt;td&gt;qfsj&lt;/td&gt;
      &lt;td&gt;起飞时间&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;乘坐航班&lt;/td&gt;
      &lt;td&gt;ddsj&lt;/td&gt;
      &lt;td&gt;终点站&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;网吧&quot;&gt;网吧&lt;/h4&gt;

&lt;h4 id=&quot;网吧信息-节点&quot;&gt;网吧信息-节点&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：Netbars&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模型构建:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514966522867_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;网吧信息顶点主键 ‘netbarsId:wbh2017’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网吧ID ‘wbid:wbh2017’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网吧名称 wbmc:贵阳风铃网吧’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网吧详细地址 ‘wbxxdz:贵州省贵阳市云岩区宝山北路111号’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建时间 ‘createTime:2017..’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新时间 ‘updateTime:2017…’&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;数据结构：&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Netbars&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netbars&lt;/td&gt;
      &lt;td&gt;metbarsId&lt;/td&gt;
      &lt;td&gt;网吧自定义主键&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netbars&lt;/td&gt;
      &lt;td&gt;wbid&lt;/td&gt;
      &lt;td&gt;网吧ID&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netbars&lt;/td&gt;
      &lt;td&gt;wbmc&lt;/td&gt;
      &lt;td&gt;网吧名称&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netbars&lt;/td&gt;
      &lt;td&gt;wbxxdz&lt;/td&gt;
      &lt;td&gt;网吧详细地址&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netbars&lt;/td&gt;
      &lt;td&gt;createTime&lt;/td&gt;
      &lt;td&gt;创建时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netbars&lt;/td&gt;
      &lt;td&gt;updateTime&lt;/td&gt;
      &lt;td&gt;更新时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;上网-关系&quot;&gt;上网-关系&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：上网&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://v4liulv.github.io/assets/image/1514966619102_13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模型构建（人—&amp;gt;网吧信息关系）：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;属性包含：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原系统主键 yxt_id: zbda…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;原系统更新时间 yxt_gxsj: 2017-12-14 20:50&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;上网时间 swsj: 2017-12-14 08:00&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下网时间 xwsj: 2017-12-14 14:14&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;上网信息结构：&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;属性键&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否唯一&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;是否索引&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;网吧上网&lt;/td&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;Neo4j自定义的ID&lt;/td&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;网吧上网&lt;/td&gt;
      &lt;td&gt;yxt_id&lt;/td&gt;
      &lt;td&gt;原系统主键&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;网吧上网&lt;/td&gt;
      &lt;td&gt;yxt_gxsj&lt;/td&gt;
      &lt;td&gt;原系统更新时间&lt;/td&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;网吧上网&lt;/td&gt;
      &lt;td&gt;swsj&lt;/td&gt;
      &lt;td&gt;上网时间&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;网吧上网&lt;/td&gt;
      &lt;td&gt;ddsj&lt;/td&gt;
      &lt;td&gt;下网时间&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="图库" /><summary type="html">模型分析</summary></entry></feed>