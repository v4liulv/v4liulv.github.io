I"8<h1 id="简单介绍">简单介绍</h1>

<p>在新版的Akka中，创建Actor是我们最常用的，而创建Actor使用新版的AbstractBehavior<POJO>有两种常用的方式创建，太常用了所以单独列出两种创建Actor的示例。</POJO></p>

<h1 id="创建actor的方式">创建Actor的方式</h1>

<p>创建Actor新版本支持以下两种方式创建：</p>
<ul>
  <li>传统的继承AbstractBehavior<POJO>方式</POJO></li>
  <li>方法直接函数式构造创建</li>
</ul>

<h1 id="传统的继承abstractbehavior方式">传统的继承AbstractBehavior<POJO>方式</POJO></h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActorTest</span> <span class="kd">extends</span> <span class="nc">AbstractBehavior</span><span class="o">&lt;</span><span class="nc">ActorTest</span><span class="o">.</span><span class="na">Command</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="c1">//先定义Actor请求消息类型接口</span>
    <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{}</span>

    <span class="c1">//请求消息交互的POJO</span>
    <span class="o">...</span>

    <span class="c1">//响应消息接口</span>
     <span class="kd">interface</span> <span class="nc">Ref</span> <span class="o">{}</span>

    <span class="c1">//响应消息交互的POJO</span>
    <span class="o">...</span>

    <span class="c1">//静态方法创建actor入口方法</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Behavior</span><span class="o">&lt;</span><span class="nc">Command</span><span class="o">&gt;</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Behaviors</span><span class="o">.</span><span class="na">setup</span><span class="o">(</span><span class="n">context</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">ActorTest</span><span class="o">(</span><span class="n">context</span><span class="o">));</span>
    <span class="o">}</span>
 
    <span class="c1">//构造方法创建Actor</span>
    <span class="kd">public</span> <span class="nf">ActorTest</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">){</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
        <span class="o">...</span>
    <span class="o">}</span>

    <span class="c1">//消息接收处理</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Receive</span><span class="o">&lt;</span><span class="nc">Command</span><span class="o">&gt;</span> <span class="nf">createReceive</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">newReceiveBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">onMessage</span><span class="o">(</span><span class="nc">Request</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">this</span><span class="o">::</span><span class="n">onRequest</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="c1">//实际消息处理</span>
    <span class="kd">private</span> <span class="nc">Behavior</span><span class="o">&lt;</span><span class="nc">Command</span><span class="o">&gt;</span> <span class="nf">onUpdate</span><span class="o">(</span><span class="nc">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">request</span><span class="o">.</span><span class="na">ref</span><span class="o">.</span><span class="na">tell</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>

        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="c1">//或return Behaviors.same();</span>
    <span class="o">}</span>
    
    <span class="c1">//...</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="方法直接函数式构造创建">方法直接函数式构造创建</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActorTest</span> <span class="o">{</span>
    <span class="c1">//这种方式无法getContext()获取context，通过静态全局属性设置</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">ActorContext</span><span class="o">&lt;</span><span class="nc">Request</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">;</span>
    

    <span class="c1">//先定义Actor请求消息类型接口</span>
    <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{}</span>

    <span class="c1">//请求消息交互的POJO</span>
    <span class="o">...</span>

    <span class="c1">//响应消息接口</span>
     <span class="kd">interface</span> <span class="nc">Ref</span> <span class="o">{}</span>

    <span class="c1">//响应消息交互的POJO</span>
    <span class="o">...</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Behavior</span><span class="o">&lt;</span><span class="nc">ActorTest</span><span class="o">.</span><span class="na">Command</span><span class="o">&gt;</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Behaviors</span><span class="o">.</span><span class="na">setup</span><span class="o">(</span><span class="n">context</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="n">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
                    <span class="k">return</span> <span class="nc">Behaviors</span><span class="o">.</span><span class="na">receive</span><span class="o">(</span><span class="nc">Request</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">onMessage</span><span class="o">(</span><span class="nc">Request</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                            <span class="nl">CookieFabric:</span><span class="o">:</span><span class="n">onRequest</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
            <span class="o">});</span>
        <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET